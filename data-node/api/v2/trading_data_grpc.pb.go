// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: data-node/api/v2/trading_data.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradingDataServiceClient is the client API for TradingDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingDataServiceClient interface {
	// Get an aggregated list of the changes in balances in a set of accounts over time
	QueryBalanceHistory(ctx context.Context, in *QueryBalanceHistoryRequest, opts ...grpc.CallOption) (*QueryBalanceHistoryResponse, error)
	// -- Market Data --
	// Get Market Data by Market ID
	GetMarketDataByID(ctx context.Context, in *GetMarketDataByIDRequest, opts ...grpc.CallOption) (*GetMarketDataByIDResponse, error)
	// Get a list of Market Data
	GetMarketsData(ctx context.Context, in *GetMarketsDataRequest, opts ...grpc.CallOption) (*GetMarketsDataResponse, error)
	// Get Market Data History for a Market ID between given dates
	GetMarketDataHistoryByID(ctx context.Context, in *GetMarketDataHistoryByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryByIDResponse, error)
	// Get all Market Data history for a Market ID from a given start date
	GetMarketDataHistoryFromDateByID(ctx context.Context, in *GetMarketDataHistoryFromDateByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryFromDateByIDResponse, error)
	// Get all Market Data history for a Market ID up to a given date
	GetMarketDataHistoryToDateByID(ctx context.Context, in *GetMarketDataHistoryToDateByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryToDateByIDResponse, error)
}

type tradingDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingDataServiceClient(cc grpc.ClientConnInterface) TradingDataServiceClient {
	return &tradingDataServiceClient{cc}
}

func (c *tradingDataServiceClient) QueryBalanceHistory(ctx context.Context, in *QueryBalanceHistoryRequest, opts ...grpc.CallOption) (*QueryBalanceHistoryResponse, error) {
	out := new(QueryBalanceHistoryResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/QueryBalanceHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMarketDataByID(ctx context.Context, in *GetMarketDataByIDRequest, opts ...grpc.CallOption) (*GetMarketDataByIDResponse, error) {
	out := new(GetMarketDataByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarketDataByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMarketsData(ctx context.Context, in *GetMarketsDataRequest, opts ...grpc.CallOption) (*GetMarketsDataResponse, error) {
	out := new(GetMarketsDataResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarketsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMarketDataHistoryByID(ctx context.Context, in *GetMarketDataHistoryByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryByIDResponse, error) {
	out := new(GetMarketDataHistoryByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMarketDataHistoryFromDateByID(ctx context.Context, in *GetMarketDataHistoryFromDateByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryFromDateByIDResponse, error) {
	out := new(GetMarketDataHistoryFromDateByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarketDataHistoryFromDateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingDataServiceClient) GetMarketDataHistoryToDateByID(ctx context.Context, in *GetMarketDataHistoryToDateByIDRequest, opts ...grpc.CallOption) (*GetMarketDataHistoryToDateByIDResponse, error) {
	out := new(GetMarketDataHistoryToDateByIDResponse)
	err := c.cc.Invoke(ctx, "/datanode.api.v2.TradingDataService/GetMarketDataHistoryToDateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingDataServiceServer is the server API for TradingDataService service.
// All implementations must embed UnimplementedTradingDataServiceServer
// for forward compatibility
type TradingDataServiceServer interface {
	// Get an aggregated list of the changes in balances in a set of accounts over time
	QueryBalanceHistory(context.Context, *QueryBalanceHistoryRequest) (*QueryBalanceHistoryResponse, error)
	// -- Market Data --
	// Get Market Data by Market ID
	GetMarketDataByID(context.Context, *GetMarketDataByIDRequest) (*GetMarketDataByIDResponse, error)
	// Get a list of Market Data
	GetMarketsData(context.Context, *GetMarketsDataRequest) (*GetMarketsDataResponse, error)
	// Get Market Data History for a Market ID between given dates
	GetMarketDataHistoryByID(context.Context, *GetMarketDataHistoryByIDRequest) (*GetMarketDataHistoryByIDResponse, error)
	// Get all Market Data history for a Market ID from a given start date
	GetMarketDataHistoryFromDateByID(context.Context, *GetMarketDataHistoryFromDateByIDRequest) (*GetMarketDataHistoryFromDateByIDResponse, error)
	// Get all Market Data history for a Market ID up to a given date
	GetMarketDataHistoryToDateByID(context.Context, *GetMarketDataHistoryToDateByIDRequest) (*GetMarketDataHistoryToDateByIDResponse, error)
	mustEmbedUnimplementedTradingDataServiceServer()
}

// UnimplementedTradingDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradingDataServiceServer struct {
}

func (UnimplementedTradingDataServiceServer) QueryBalanceHistory(context.Context, *QueryBalanceHistoryRequest) (*QueryBalanceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBalanceHistory not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarketDataByID(context.Context, *GetMarketDataByIDRequest) (*GetMarketDataByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDataByID not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarketsData(context.Context, *GetMarketsDataRequest) (*GetMarketsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketsData not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarketDataHistoryByID(context.Context, *GetMarketDataHistoryByIDRequest) (*GetMarketDataHistoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDataHistoryByID not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarketDataHistoryFromDateByID(context.Context, *GetMarketDataHistoryFromDateByIDRequest) (*GetMarketDataHistoryFromDateByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDataHistoryFromDateByID not implemented")
}
func (UnimplementedTradingDataServiceServer) GetMarketDataHistoryToDateByID(context.Context, *GetMarketDataHistoryToDateByIDRequest) (*GetMarketDataHistoryToDateByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDataHistoryToDateByID not implemented")
}
func (UnimplementedTradingDataServiceServer) mustEmbedUnimplementedTradingDataServiceServer() {}

// UnsafeTradingDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingDataServiceServer will
// result in compilation errors.
type UnsafeTradingDataServiceServer interface {
	mustEmbedUnimplementedTradingDataServiceServer()
}

func RegisterTradingDataServiceServer(s grpc.ServiceRegistrar, srv TradingDataServiceServer) {
	s.RegisterService(&TradingDataService_ServiceDesc, srv)
}

func _TradingDataService_QueryBalanceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).QueryBalanceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/QueryBalanceHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).QueryBalanceHistory(ctx, req.(*QueryBalanceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMarketDataByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDataByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarketDataByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarketDataByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarketDataByID(ctx, req.(*GetMarketDataByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMarketsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarketsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarketsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarketsData(ctx, req.(*GetMarketsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMarketDataHistoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDataHistoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarketDataHistoryByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryByID(ctx, req.(*GetMarketDataHistoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMarketDataHistoryFromDateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDataHistoryFromDateByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryFromDateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarketDataHistoryFromDateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryFromDateByID(ctx, req.(*GetMarketDataHistoryFromDateByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingDataService_GetMarketDataHistoryToDateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketDataHistoryToDateByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryToDateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datanode.api.v2.TradingDataService/GetMarketDataHistoryToDateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingDataServiceServer).GetMarketDataHistoryToDateByID(ctx, req.(*GetMarketDataHistoryToDateByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingDataService_ServiceDesc is the grpc.ServiceDesc for TradingDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datanode.api.v2.TradingDataService",
	HandlerType: (*TradingDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryBalanceHistory",
			Handler:    _TradingDataService_QueryBalanceHistory_Handler,
		},
		{
			MethodName: "GetMarketDataByID",
			Handler:    _TradingDataService_GetMarketDataByID_Handler,
		},
		{
			MethodName: "GetMarketsData",
			Handler:    _TradingDataService_GetMarketsData_Handler,
		},
		{
			MethodName: "GetMarketDataHistoryByID",
			Handler:    _TradingDataService_GetMarketDataHistoryByID_Handler,
		},
		{
			MethodName: "GetMarketDataHistoryFromDateByID",
			Handler:    _TradingDataService_GetMarketDataHistoryFromDateByID_Handler,
		},
		{
			MethodName: "GetMarketDataHistoryToDateByID",
			Handler:    _TradingDataService_GetMarketDataHistoryToDateByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data-node/api/v2/trading_data.proto",
}
