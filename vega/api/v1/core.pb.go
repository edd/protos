// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vega/api/v1/core.proto

package v1

import (
	vega "code.vegaprotocol.io/protos/vega"
	v1 "code.vegaprotocol.io/protos/vega/commands/v1"
	v11 "code.vegaprotocol.io/protos/vega/events/v1"
	_ "code.vegaprotocol.io/protos/vega/oracles/v1"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Blockchain transaction type
type SubmitTransactionRequest_Type int32

const (
	SubmitTransactionRequest_TYPE_UNSPECIFIED SubmitTransactionRequest_Type = 0
	// The transaction will be submitted without waiting for response
	SubmitTransactionRequest_TYPE_ASYNC SubmitTransactionRequest_Type = 1
	// The transaction will be submitted, and blocking until the
	// tendermint mempool return a response
	SubmitTransactionRequest_TYPE_SYNC SubmitTransactionRequest_Type = 2
	// The transaction will submitted, and blocking until the tendermint
	// network will have committed it into a block
	SubmitTransactionRequest_TYPE_COMMIT SubmitTransactionRequest_Type = 3
)

var SubmitTransactionRequest_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_ASYNC",
	2: "TYPE_SYNC",
	3: "TYPE_COMMIT",
}

var SubmitTransactionRequest_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"TYPE_ASYNC":       1,
	"TYPE_SYNC":        2,
	"TYPE_COMMIT":      3,
}

func (x SubmitTransactionRequest_Type) String() string {
	return proto.EnumName(SubmitTransactionRequest_Type_name, int32(x))
}

func (SubmitTransactionRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{2, 0}
}

// Request for a new event sent by the blockchain queue to be propagated on Vega
type PropagateChainEventRequest struct {
	// Chain event
	Event []byte `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// Public key
	PubKey string `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// Signature
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PropagateChainEventRequest) Reset()         { *m = PropagateChainEventRequest{} }
func (m *PropagateChainEventRequest) String() string { return proto.CompactTextString(m) }
func (*PropagateChainEventRequest) ProtoMessage()    {}
func (*PropagateChainEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{0}
}

func (m *PropagateChainEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropagateChainEventRequest.Unmarshal(m, b)
}
func (m *PropagateChainEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropagateChainEventRequest.Marshal(b, m, deterministic)
}
func (m *PropagateChainEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropagateChainEventRequest.Merge(m, src)
}
func (m *PropagateChainEventRequest) XXX_Size() int {
	return xxx_messageInfo_PropagateChainEventRequest.Size(m)
}
func (m *PropagateChainEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PropagateChainEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PropagateChainEventRequest proto.InternalMessageInfo

func (m *PropagateChainEventRequest) GetEvent() []byte {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *PropagateChainEventRequest) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *PropagateChainEventRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Response for a new event sent by the blockchain queue to be propagated on Vega
type PropagateChainEventResponse struct {
	// Success will be true if the event was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PropagateChainEventResponse) Reset()         { *m = PropagateChainEventResponse{} }
func (m *PropagateChainEventResponse) String() string { return proto.CompactTextString(m) }
func (*PropagateChainEventResponse) ProtoMessage()    {}
func (*PropagateChainEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{1}
}

func (m *PropagateChainEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropagateChainEventResponse.Unmarshal(m, b)
}
func (m *PropagateChainEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropagateChainEventResponse.Marshal(b, m, deterministic)
}
func (m *PropagateChainEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropagateChainEventResponse.Merge(m, src)
}
func (m *PropagateChainEventResponse) XXX_Size() int {
	return xxx_messageInfo_PropagateChainEventResponse.Size(m)
}
func (m *PropagateChainEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PropagateChainEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PropagateChainEventResponse proto.InternalMessageInfo

func (m *PropagateChainEventResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Request for submitting a transaction v2 on Vega
type SubmitTransactionRequest struct {
	// A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain
	Tx *v1.Transaction `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	// Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response
	Type                 SubmitTransactionRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=vega.api.v1.SubmitTransactionRequest_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SubmitTransactionRequest) Reset()         { *m = SubmitTransactionRequest{} }
func (m *SubmitTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionRequest) ProtoMessage()    {}
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{2}
}

func (m *SubmitTransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionRequest.Unmarshal(m, b)
}
func (m *SubmitTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionRequest.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionRequest.Merge(m, src)
}
func (m *SubmitTransactionRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionRequest.Size(m)
}
func (m *SubmitTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionRequest proto.InternalMessageInfo

func (m *SubmitTransactionRequest) GetTx() *v1.Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *SubmitTransactionRequest) GetType() SubmitTransactionRequest_Type {
	if m != nil {
		return m.Type
	}
	return SubmitTransactionRequest_TYPE_UNSPECIFIED
}

// Response for submitting a transaction v2 on Vega
type SubmitTransactionResponse struct {
	// Success will be true if the transaction was accepted by the node,
	// **Important** - success does not mean that the event is confirmed by consensus
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Hash of the transaction, if accepted
	TxHash               string   `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubmitTransactionResponse) Reset()         { *m = SubmitTransactionResponse{} }
func (m *SubmitTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*SubmitTransactionResponse) ProtoMessage()    {}
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{3}
}

func (m *SubmitTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitTransactionResponse.Unmarshal(m, b)
}
func (m *SubmitTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitTransactionResponse.Marshal(b, m, deterministic)
}
func (m *SubmitTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitTransactionResponse.Merge(m, src)
}
func (m *SubmitTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_SubmitTransactionResponse.Size(m)
}
func (m *SubmitTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitTransactionResponse proto.InternalMessageInfo

func (m *SubmitTransactionResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SubmitTransactionResponse) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// Request for the current time of the vega network
type GetVegaTimeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVegaTimeRequest) Reset()         { *m = GetVegaTimeRequest{} }
func (m *GetVegaTimeRequest) String() string { return proto.CompactTextString(m) }
func (*GetVegaTimeRequest) ProtoMessage()    {}
func (*GetVegaTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{4}
}

func (m *GetVegaTimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVegaTimeRequest.Unmarshal(m, b)
}
func (m *GetVegaTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVegaTimeRequest.Marshal(b, m, deterministic)
}
func (m *GetVegaTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVegaTimeRequest.Merge(m, src)
}
func (m *GetVegaTimeRequest) XXX_Size() int {
	return xxx_messageInfo_GetVegaTimeRequest.Size(m)
}
func (m *GetVegaTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVegaTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVegaTimeRequest proto.InternalMessageInfo

// Response for the current consensus coordinated time on the Vega network, referred to as "VegaTime"
type GetVegaTimeResponse struct {
	// Timestamp representation of current VegaTime as represented in
	// Nanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVegaTimeResponse) Reset()         { *m = GetVegaTimeResponse{} }
func (m *GetVegaTimeResponse) String() string { return proto.CompactTextString(m) }
func (*GetVegaTimeResponse) ProtoMessage()    {}
func (*GetVegaTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{5}
}

func (m *GetVegaTimeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVegaTimeResponse.Unmarshal(m, b)
}
func (m *GetVegaTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVegaTimeResponse.Marshal(b, m, deterministic)
}
func (m *GetVegaTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVegaTimeResponse.Merge(m, src)
}
func (m *GetVegaTimeResponse) XXX_Size() int {
	return xxx_messageInfo_GetVegaTimeResponse.Size(m)
}
func (m *GetVegaTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVegaTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVegaTimeResponse proto.InternalMessageInfo

func (m *GetVegaTimeResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Request to subscribe to a stream of one or more event types from the Vega event bus
type ObserveEventBusRequest struct {
	// One or more types of event, required field
	Type []v11.BusEventType `protobuf:"varint,1,rep,packed,name=type,proto3,enum=vega.events.v1.BusEventType" json:"type,omitempty"`
	// Market identifier, optional field
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier, optional field
	PartyId string `protobuf:"bytes,3,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Batch size, optional field -
	// If not specified, any events received will be sent immediately. If the client is not ready
	// for the next data-set, data may be dropped a number of times, and eventually the stream is closed.
	// if specified, the first batch will be sent when ready. To receive the next set of events, the client
	// must write an `ObserveEventBatch` message on the stream to flush the buffer.
	// If no message is received in 5 seconds, the stream is closed.
	// Default: 0, send any and all events when they are available.
	BatchSize            int64    `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObserveEventBusRequest) Reset()         { *m = ObserveEventBusRequest{} }
func (m *ObserveEventBusRequest) String() string { return proto.CompactTextString(m) }
func (*ObserveEventBusRequest) ProtoMessage()    {}
func (*ObserveEventBusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{6}
}

func (m *ObserveEventBusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObserveEventBusRequest.Unmarshal(m, b)
}
func (m *ObserveEventBusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObserveEventBusRequest.Marshal(b, m, deterministic)
}
func (m *ObserveEventBusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserveEventBusRequest.Merge(m, src)
}
func (m *ObserveEventBusRequest) XXX_Size() int {
	return xxx_messageInfo_ObserveEventBusRequest.Size(m)
}
func (m *ObserveEventBusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserveEventBusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ObserveEventBusRequest proto.InternalMessageInfo

func (m *ObserveEventBusRequest) GetType() []v11.BusEventType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ObserveEventBusRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *ObserveEventBusRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *ObserveEventBusRequest) GetBatchSize() int64 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

// Response to a subscribed stream of events from the Vega event bus
type ObserveEventBusResponse struct {
	// One or more events
	Events               []*v11.BusEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ObserveEventBusResponse) Reset()         { *m = ObserveEventBusResponse{} }
func (m *ObserveEventBusResponse) String() string { return proto.CompactTextString(m) }
func (*ObserveEventBusResponse) ProtoMessage()    {}
func (*ObserveEventBusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{7}
}

func (m *ObserveEventBusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObserveEventBusResponse.Unmarshal(m, b)
}
func (m *ObserveEventBusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObserveEventBusResponse.Marshal(b, m, deterministic)
}
func (m *ObserveEventBusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserveEventBusResponse.Merge(m, src)
}
func (m *ObserveEventBusResponse) XXX_Size() int {
	return xxx_messageInfo_ObserveEventBusResponse.Size(m)
}
func (m *ObserveEventBusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserveEventBusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ObserveEventBusResponse proto.InternalMessageInfo

func (m *ObserveEventBusResponse) GetEvents() []*v11.BusEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

// A a request for statistics about the Vega network
type StatisticsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatisticsRequest) Reset()         { *m = StatisticsRequest{} }
func (m *StatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*StatisticsRequest) ProtoMessage()    {}
func (*StatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{8}
}

func (m *StatisticsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatisticsRequest.Unmarshal(m, b)
}
func (m *StatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatisticsRequest.Marshal(b, m, deterministic)
}
func (m *StatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsRequest.Merge(m, src)
}
func (m *StatisticsRequest) XXX_Size() int {
	return xxx_messageInfo_StatisticsRequest.Size(m)
}
func (m *StatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsRequest proto.InternalMessageInfo

type StatisticsResponse struct {
	Statistics           *Statistics `protobuf:"bytes,1,opt,name=statistics,proto3" json:"statistics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StatisticsResponse) Reset()         { *m = StatisticsResponse{} }
func (m *StatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*StatisticsResponse) ProtoMessage()    {}
func (*StatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{9}
}

func (m *StatisticsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatisticsResponse.Unmarshal(m, b)
}
func (m *StatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatisticsResponse.Marshal(b, m, deterministic)
}
func (m *StatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatisticsResponse.Merge(m, src)
}
func (m *StatisticsResponse) XXX_Size() int {
	return xxx_messageInfo_StatisticsResponse.Size(m)
}
func (m *StatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatisticsResponse proto.InternalMessageInfo

func (m *StatisticsResponse) GetStatistics() *Statistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

// Vega domain specific statistics as reported by the node the caller is connected to
type Statistics struct {
	// Current block height as reported by the Vega blockchain
	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Current backlog length (number of transactions) that are waiting to be included in a block
	BacklogLength uint64 `protobuf:"varint,2,opt,name=backlog_length,json=backlogLength,proto3" json:"backlog_length,omitempty"`
	// Total number of connected peers to this node
	TotalPeers uint64 `protobuf:"varint,3,opt,name=total_peers,json=totalPeers,proto3" json:"total_peers,omitempty"`
	// Genesis block date and time formatted in ISO-8601 datetime format with nanosecond precision
	GenesisTime string `protobuf:"bytes,4,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	// Current system date and time formatted in ISO-8601 datetime format with nanosecond precision
	CurrentTime string `protobuf:"bytes,5,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
	// Current Vega date and time formatted in ISO-8601 datetime format with nanosecond precision
	VegaTime string `protobuf:"bytes,6,opt,name=vega_time,json=vegaTime,proto3" json:"vega_time,omitempty"`
	// Status of the connection to the Vega blockchain
	// - See [`ChainStatus`](#vega.ChainStatus)
	Status vega.ChainStatus `protobuf:"varint,7,opt,name=status,proto3,enum=vega.ChainStatus" json:"status,omitempty"`
	// Transactions per block
	TxPerBlock uint64 `protobuf:"varint,8,opt,name=tx_per_block,json=txPerBlock,proto3" json:"tx_per_block,omitempty"`
	// Average transaction size in bytes
	AverageTxBytes uint64 `protobuf:"varint,9,opt,name=average_tx_bytes,json=averageTxBytes,proto3" json:"average_tx_bytes,omitempty"`
	// Average orders per block
	AverageOrdersPerBlock uint64 `protobuf:"varint,10,opt,name=average_orders_per_block,json=averageOrdersPerBlock,proto3" json:"average_orders_per_block,omitempty"`
	// Trades emitted per second
	TradesPerSecond uint64 `protobuf:"varint,11,opt,name=trades_per_second,json=tradesPerSecond,proto3" json:"trades_per_second,omitempty"`
	// Orders processed per second
	OrdersPerSecond uint64 `protobuf:"varint,12,opt,name=orders_per_second,json=ordersPerSecond,proto3" json:"orders_per_second,omitempty"`
	// Total markets on this Vega network
	TotalMarkets uint64 `protobuf:"varint,13,opt,name=total_markets,json=totalMarkets,proto3" json:"total_markets,omitempty"`
	// Total number of order amendments since genesis (on all markets)
	TotalAmendOrder uint64 `protobuf:"varint,16,opt,name=total_amend_order,json=totalAmendOrder,proto3" json:"total_amend_order,omitempty"`
	// Total number of order cancellations since genesis (on all markets)
	TotalCancelOrder uint64 `protobuf:"varint,17,opt,name=total_cancel_order,json=totalCancelOrder,proto3" json:"total_cancel_order,omitempty"`
	// Total number of order submissions since genesis (on all markets)
	TotalCreateOrder uint64 `protobuf:"varint,18,opt,name=total_create_order,json=totalCreateOrder,proto3" json:"total_create_order,omitempty"`
	// Total number of orders processed since genesis (on all markets)
	TotalOrders uint64 `protobuf:"varint,19,opt,name=total_orders,json=totalOrders,proto3" json:"total_orders,omitempty"`
	// Total number of trades emitted since genesis (on all markets)
	TotalTrades uint64 `protobuf:"varint,20,opt,name=total_trades,json=totalTrades,proto3" json:"total_trades,omitempty"`
	// Current number of stream subscribers to order data
	OrderSubscriptions uint32 `protobuf:"varint,21,opt,name=order_subscriptions,json=orderSubscriptions,proto3" json:"order_subscriptions,omitempty"`
	// Current number of stream subscribers to trade data
	TradeSubscriptions uint32 `protobuf:"varint,22,opt,name=trade_subscriptions,json=tradeSubscriptions,proto3" json:"trade_subscriptions,omitempty"`
	// Current number of stream subscribers to candle-stick data
	CandleSubscriptions uint32 `protobuf:"varint,23,opt,name=candle_subscriptions,json=candleSubscriptions,proto3" json:"candle_subscriptions,omitempty"`
	// Current number of stream subscribers to market depth data
	MarketDepthSubscriptions uint32 `protobuf:"varint,24,opt,name=market_depth_subscriptions,json=marketDepthSubscriptions,proto3" json:"market_depth_subscriptions,omitempty"`
	// Current number of stream subscribers to positions data
	PositionsSubscriptions uint32 `protobuf:"varint,25,opt,name=positions_subscriptions,json=positionsSubscriptions,proto3" json:"positions_subscriptions,omitempty"`
	// Current number of stream subscribers to account data
	AccountSubscriptions uint32 `protobuf:"varint,26,opt,name=account_subscriptions,json=accountSubscriptions,proto3" json:"account_subscriptions,omitempty"`
	// Current number of stream subscribers to market data
	MarketDataSubscriptions uint32 `protobuf:"varint,27,opt,name=market_data_subscriptions,json=marketDataSubscriptions,proto3" json:"market_data_subscriptions,omitempty"`
	// The version hash of the Vega node software
	AppVersionHash string `protobuf:"bytes,28,opt,name=app_version_hash,json=appVersionHash,proto3" json:"app_version_hash,omitempty"`
	// The version of the Vega node software
	AppVersion string `protobuf:"bytes,29,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// The version of the underlying Vega blockchain
	ChainVersion string `protobuf:"bytes,30,opt,name=chain_version,json=chainVersion,proto3" json:"chain_version,omitempty"`
	// Current block duration, in nanoseconds
	BlockDuration uint64 `protobuf:"varint,31,opt,name=block_duration,json=blockDuration,proto3" json:"block_duration,omitempty"`
	// Total uptime for this node formatted in ISO-8601 datetime format with nanosecond precision
	Uptime string `protobuf:"bytes,32,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// Unique identifier for the underlying Vega blockchain
	ChainId string `protobuf:"bytes,33,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Current number of stream subscribers to market depth update data
	MarketDepthUpdatesSubscriptions uint32   `protobuf:"varint,34,opt,name=market_depth_updates_subscriptions,json=marketDepthUpdatesSubscriptions,proto3" json:"market_depth_updates_subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *Statistics) Reset()         { *m = Statistics{} }
func (m *Statistics) String() string { return proto.CompactTextString(m) }
func (*Statistics) ProtoMessage()    {}
func (*Statistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{10}
}

func (m *Statistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Statistics.Unmarshal(m, b)
}
func (m *Statistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Statistics.Marshal(b, m, deterministic)
}
func (m *Statistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistics.Merge(m, src)
}
func (m *Statistics) XXX_Size() int {
	return xxx_messageInfo_Statistics.Size(m)
}
func (m *Statistics) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistics.DiscardUnknown(m)
}

var xxx_messageInfo_Statistics proto.InternalMessageInfo

func (m *Statistics) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Statistics) GetBacklogLength() uint64 {
	if m != nil {
		return m.BacklogLength
	}
	return 0
}

func (m *Statistics) GetTotalPeers() uint64 {
	if m != nil {
		return m.TotalPeers
	}
	return 0
}

func (m *Statistics) GetGenesisTime() string {
	if m != nil {
		return m.GenesisTime
	}
	return ""
}

func (m *Statistics) GetCurrentTime() string {
	if m != nil {
		return m.CurrentTime
	}
	return ""
}

func (m *Statistics) GetVegaTime() string {
	if m != nil {
		return m.VegaTime
	}
	return ""
}

func (m *Statistics) GetStatus() vega.ChainStatus {
	if m != nil {
		return m.Status
	}
	return vega.ChainStatus_CHAIN_STATUS_UNSPECIFIED
}

func (m *Statistics) GetTxPerBlock() uint64 {
	if m != nil {
		return m.TxPerBlock
	}
	return 0
}

func (m *Statistics) GetAverageTxBytes() uint64 {
	if m != nil {
		return m.AverageTxBytes
	}
	return 0
}

func (m *Statistics) GetAverageOrdersPerBlock() uint64 {
	if m != nil {
		return m.AverageOrdersPerBlock
	}
	return 0
}

func (m *Statistics) GetTradesPerSecond() uint64 {
	if m != nil {
		return m.TradesPerSecond
	}
	return 0
}

func (m *Statistics) GetOrdersPerSecond() uint64 {
	if m != nil {
		return m.OrdersPerSecond
	}
	return 0
}

func (m *Statistics) GetTotalMarkets() uint64 {
	if m != nil {
		return m.TotalMarkets
	}
	return 0
}

func (m *Statistics) GetTotalAmendOrder() uint64 {
	if m != nil {
		return m.TotalAmendOrder
	}
	return 0
}

func (m *Statistics) GetTotalCancelOrder() uint64 {
	if m != nil {
		return m.TotalCancelOrder
	}
	return 0
}

func (m *Statistics) GetTotalCreateOrder() uint64 {
	if m != nil {
		return m.TotalCreateOrder
	}
	return 0
}

func (m *Statistics) GetTotalOrders() uint64 {
	if m != nil {
		return m.TotalOrders
	}
	return 0
}

func (m *Statistics) GetTotalTrades() uint64 {
	if m != nil {
		return m.TotalTrades
	}
	return 0
}

func (m *Statistics) GetOrderSubscriptions() uint32 {
	if m != nil {
		return m.OrderSubscriptions
	}
	return 0
}

func (m *Statistics) GetTradeSubscriptions() uint32 {
	if m != nil {
		return m.TradeSubscriptions
	}
	return 0
}

func (m *Statistics) GetCandleSubscriptions() uint32 {
	if m != nil {
		return m.CandleSubscriptions
	}
	return 0
}

func (m *Statistics) GetMarketDepthSubscriptions() uint32 {
	if m != nil {
		return m.MarketDepthSubscriptions
	}
	return 0
}

func (m *Statistics) GetPositionsSubscriptions() uint32 {
	if m != nil {
		return m.PositionsSubscriptions
	}
	return 0
}

func (m *Statistics) GetAccountSubscriptions() uint32 {
	if m != nil {
		return m.AccountSubscriptions
	}
	return 0
}

func (m *Statistics) GetMarketDataSubscriptions() uint32 {
	if m != nil {
		return m.MarketDataSubscriptions
	}
	return 0
}

func (m *Statistics) GetAppVersionHash() string {
	if m != nil {
		return m.AppVersionHash
	}
	return ""
}

func (m *Statistics) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *Statistics) GetChainVersion() string {
	if m != nil {
		return m.ChainVersion
	}
	return ""
}

func (m *Statistics) GetBlockDuration() uint64 {
	if m != nil {
		return m.BlockDuration
	}
	return 0
}

func (m *Statistics) GetUptime() string {
	if m != nil {
		return m.Uptime
	}
	return ""
}

func (m *Statistics) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Statistics) GetMarketDepthUpdatesSubscriptions() uint32 {
	if m != nil {
		return m.MarketDepthUpdatesSubscriptions
	}
	return 0
}

// A request to get the height of the very last block processed
// by tendermint
type LastBlockHeightRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LastBlockHeightRequest) Reset()         { *m = LastBlockHeightRequest{} }
func (m *LastBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*LastBlockHeightRequest) ProtoMessage()    {}
func (*LastBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{11}
}

func (m *LastBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LastBlockHeightRequest.Unmarshal(m, b)
}
func (m *LastBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LastBlockHeightRequest.Marshal(b, m, deterministic)
}
func (m *LastBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastBlockHeightRequest.Merge(m, src)
}
func (m *LastBlockHeightRequest) XXX_Size() int {
	return xxx_messageInfo_LastBlockHeightRequest.Size(m)
}
func (m *LastBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LastBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LastBlockHeightRequest proto.InternalMessageInfo

// A response with the height of the last block processed by
// tendermint
type LastBlockHeightResponse struct {
	Height               uint64   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LastBlockHeightResponse) Reset()         { *m = LastBlockHeightResponse{} }
func (m *LastBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*LastBlockHeightResponse) ProtoMessage()    {}
func (*LastBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b743bbbcd011275, []int{12}
}

func (m *LastBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LastBlockHeightResponse.Unmarshal(m, b)
}
func (m *LastBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LastBlockHeightResponse.Marshal(b, m, deterministic)
}
func (m *LastBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastBlockHeightResponse.Merge(m, src)
}
func (m *LastBlockHeightResponse) XXX_Size() int {
	return xxx_messageInfo_LastBlockHeightResponse.Size(m)
}
func (m *LastBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LastBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LastBlockHeightResponse proto.InternalMessageInfo

func (m *LastBlockHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterEnum("vega.api.v1.SubmitTransactionRequest_Type", SubmitTransactionRequest_Type_name, SubmitTransactionRequest_Type_value)
	proto.RegisterType((*PropagateChainEventRequest)(nil), "vega.api.v1.PropagateChainEventRequest")
	proto.RegisterType((*PropagateChainEventResponse)(nil), "vega.api.v1.PropagateChainEventResponse")
	proto.RegisterType((*SubmitTransactionRequest)(nil), "vega.api.v1.SubmitTransactionRequest")
	proto.RegisterType((*SubmitTransactionResponse)(nil), "vega.api.v1.SubmitTransactionResponse")
	proto.RegisterType((*GetVegaTimeRequest)(nil), "vega.api.v1.GetVegaTimeRequest")
	proto.RegisterType((*GetVegaTimeResponse)(nil), "vega.api.v1.GetVegaTimeResponse")
	proto.RegisterType((*ObserveEventBusRequest)(nil), "vega.api.v1.ObserveEventBusRequest")
	proto.RegisterType((*ObserveEventBusResponse)(nil), "vega.api.v1.ObserveEventBusResponse")
	proto.RegisterType((*StatisticsRequest)(nil), "vega.api.v1.StatisticsRequest")
	proto.RegisterType((*StatisticsResponse)(nil), "vega.api.v1.StatisticsResponse")
	proto.RegisterType((*Statistics)(nil), "vega.api.v1.Statistics")
	proto.RegisterType((*LastBlockHeightRequest)(nil), "vega.api.v1.LastBlockHeightRequest")
	proto.RegisterType((*LastBlockHeightResponse)(nil), "vega.api.v1.LastBlockHeightResponse")
}

func init() { proto.RegisterFile("vega/api/v1/core.proto", fileDescriptor_1b743bbbcd011275) }

var fileDescriptor_1b743bbbcd011275 = []byte{
	// 1333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xef, 0x6e, 0xdb, 0xb6,
	0x16, 0xbf, 0x4e, 0x5c, 0x27, 0x3e, 0xce, 0x1f, 0x87, 0x49, 0x6c, 0xc5, 0x49, 0x1b, 0x57, 0xbd,
	0xbd, 0x75, 0x8b, 0x7b, 0x9d, 0x26, 0xfd, 0x10, 0xe0, 0x62, 0x18, 0xd0, 0xa4, 0xd9, 0x1a, 0xb4,
	0x69, 0x0d, 0xd9, 0x2d, 0xd0, 0x61, 0x80, 0x46, 0x4b, 0x84, 0x2d, 0xc4, 0x96, 0x34, 0x92, 0x12,
	0x9c, 0xbe, 0xcd, 0xde, 0x63, 0xef, 0xb1, 0x67, 0xd8, 0x5b, 0x0c, 0x3c, 0xa4, 0x63, 0xc9, 0x89,
	0xd7, 0x7d, 0x33, 0x7f, 0x7f, 0x78, 0x0e, 0x0f, 0xa9, 0x43, 0x1a, 0x6a, 0x29, 0x1b, 0xd0, 0x23,
	0x1a, 0x07, 0x47, 0xe9, 0xf1, 0x91, 0x17, 0x71, 0xd6, 0x8e, 0x79, 0x24, 0x23, 0x52, 0x51, 0x78,
	0x9b, 0xc6, 0x41, 0x3b, 0x3d, 0x6e, 0x6c, 0xa2, 0x08, 0x11, 0x64, 0x1b, 0x04, 0x81, 0x31, 0xe5,
	0xd7, 0x4c, 0x0a, 0x83, 0xed, 0x22, 0x36, 0x88, 0x52, 0xc6, 0x43, 0x1a, 0x7a, 0x66, 0xa2, 0xc6,
	0x96, 0x0e, 0x20, 0xc4, 0x4c, 0xb9, 0x8f, 0x10, 0x4b, 0x59, 0x28, 0x85, 0x0a, 0xab, 0x7f, 0x19,
	0xb2, 0x81, 0x64, 0xc4, 0xa9, 0x37, 0x62, 0xc8, 0x8a, 0x98, 0x79, 0x8b, 0x38, 0x9f, 0xca, 0x69,
	0x4a, 0x87, 0xc8, 0x79, 0xd1, 0x78, 0x4c, 0x43, 0x5f, 0xe8, 0xd5, 0xe8, 0xdf, 0x46, 0x60, 0xdf,
	0x11, 0x48, 0x4e, 0x43, 0x41, 0x3d, 0x19, 0x44, 0xa1, 0xd1, 0x3c, 0xbf, 0xa3, 0x49, 0xe9, 0x28,
	0xf0, 0xa9, 0x8c, 0xb8, 0x9b, 0x9f, 0xce, 0x0e, 0xa0, 0xd1, 0xe1, 0x51, 0x4c, 0x07, 0x54, 0xb2,
	0xf3, 0x21, 0x0d, 0xc2, 0x0b, 0xb5, 0x0a, 0x87, 0xfd, 0x9a, 0x30, 0x21, 0xc9, 0x0e, 0x3c, 0xc0,
	0x55, 0x59, 0x85, 0x66, 0xa1, 0xb5, 0xe6, 0xe8, 0x01, 0xa9, 0xc3, 0x4a, 0x9c, 0xf4, 0xdd, 0x6b,
	0x76, 0x63, 0x2d, 0x35, 0x0b, 0xad, 0xb2, 0x53, 0x8a, 0x93, 0xfe, 0x3b, 0x76, 0x43, 0x0e, 0xa0,
	0x2c, 0x82, 0x41, 0x48, 0x65, 0xc2, 0x99, 0xb5, 0x8c, 0x96, 0x19, 0x60, 0x9f, 0xc2, 0xfe, 0xbd,
	0xa1, 0x44, 0x1c, 0x85, 0x82, 0x11, 0x0b, 0x56, 0x44, 0xe2, 0x79, 0x4c, 0x08, 0x8c, 0xb6, 0xea,
	0x4c, 0x87, 0xf6, 0x1f, 0x05, 0xb0, 0xba, 0x49, 0x7f, 0x1c, 0xc8, 0xde, 0x6c, 0xa9, 0xd3, 0x14,
	0xff, 0x07, 0x4b, 0x72, 0x82, 0x8e, 0xca, 0xc9, 0xc3, 0x36, 0x6e, 0xee, 0xed, 0x12, 0xd3, 0xe3,
	0x76, 0xd6, 0xb1, 0x24, 0x27, 0xe4, 0x7b, 0x28, 0xca, 0x9b, 0x98, 0x61, 0xe2, 0x1b, 0x27, 0x2f,
	0xda, 0x99, 0xf3, 0xd1, 0x5e, 0x14, 0xa3, 0xdd, 0xbb, 0x89, 0x99, 0x83, 0x3e, 0xfb, 0x3d, 0x14,
	0xd5, 0x88, 0xec, 0x40, 0xb5, 0xf7, 0xa5, 0x73, 0xe1, 0x7e, 0xfa, 0xd0, 0xed, 0x5c, 0x9c, 0x5f,
	0xfe, 0x70, 0x79, 0xf1, 0xa6, 0xfa, 0x2f, 0xb2, 0x01, 0x80, 0xe8, 0xeb, 0xee, 0x97, 0x0f, 0xe7,
	0xd5, 0x02, 0x59, 0x87, 0x32, 0x8e, 0x71, 0xb8, 0x44, 0x36, 0xa1, 0x82, 0xc3, 0xf3, 0x8f, 0x57,
	0x57, 0x97, 0xbd, 0xea, 0xb2, 0xfd, 0x01, 0xf6, 0xee, 0x09, 0xfa, 0xad, 0x82, 0xa8, 0x0d, 0x90,
	0x13, 0x77, 0x48, 0xc5, 0x70, 0xba, 0x01, 0x72, 0xf2, 0x96, 0x8a, 0xa1, 0xbd, 0x03, 0xe4, 0x47,
	0x26, 0x3f, 0xb3, 0x01, 0xed, 0x05, 0x63, 0x66, 0xd2, 0xb7, 0x5f, 0xc1, 0x76, 0x0e, 0x35, 0xf3,
	0x1f, 0x40, 0x59, 0x06, 0x63, 0x26, 0x24, 0x1d, 0xc7, 0x18, 0x61, 0xd9, 0x99, 0x01, 0xf6, 0x6f,
	0x05, 0xa8, 0x7d, 0xec, 0x0b, 0xc6, 0x53, 0x86, 0xfb, 0x74, 0x96, 0x88, 0x69, 0xc9, 0x5f, 0x9a,
	0x1a, 0x16, 0x9a, 0xcb, 0xad, 0x8d, 0x93, 0x03, 0x5d, 0x43, 0x73, 0xfa, 0xd3, 0xe3, 0xf6, 0x59,
	0x22, 0xd0, 0x31, 0xab, 0x1a, 0xd9, 0x87, 0xb2, 0xfe, 0xca, 0xdc, 0xc0, 0x37, 0x29, 0xaf, 0x6a,
	0xe0, 0xd2, 0x27, 0x7b, 0xb0, 0x1a, 0x53, 0x2e, 0x6f, 0x14, 0xb7, 0x8c, 0xdc, 0x0a, 0x8e, 0x2f,
	0x7d, 0xf2, 0x10, 0xa0, 0x4f, 0xa5, 0x37, 0x74, 0x45, 0xf0, 0x95, 0x59, 0x45, 0x9d, 0x23, 0x22,
	0xdd, 0xe0, 0x2b, 0xb3, 0xdf, 0x41, 0xfd, 0x4e, 0x8a, 0x66, 0x71, 0x2f, 0xa1, 0xa4, 0x33, 0xc2,
	0x2c, 0x2b, 0x27, 0xd6, 0xa2, 0x2c, 0x1d, 0xa3, 0xb3, 0xb7, 0x61, 0xab, 0x2b, 0xa9, 0x0c, 0x84,
	0x0c, 0xbc, 0xe9, 0x52, 0xed, 0x2b, 0x20, 0x59, 0xd0, 0x4c, 0x7e, 0x0a, 0x20, 0x6e, 0x51, 0x73,
	0xf6, 0xea, 0xf9, 0xa3, 0x34, 0x33, 0x65, 0xa4, 0xf6, 0x9f, 0x00, 0x30, 0xa3, 0xc8, 0x63, 0x58,
	0xeb, 0x8f, 0x22, 0xef, 0xda, 0x1d, 0xb2, 0x60, 0x30, 0xd4, 0x5f, 0x59, 0xd1, 0xa9, 0x20, 0xf6,
	0x16, 0x21, 0xf2, 0x14, 0x36, 0xfa, 0xd4, 0xbb, 0x1e, 0x45, 0x03, 0x77, 0xc4, 0xc2, 0x81, 0xd4,
	0x3b, 0x5e, 0x74, 0xd6, 0x0d, 0xfa, 0x1e, 0x41, 0x72, 0x08, 0x15, 0x19, 0x49, 0x3a, 0x72, 0x63,
	0xc6, 0xb8, 0xc0, 0x32, 0x16, 0x1d, 0x40, 0xa8, 0xa3, 0x10, 0x15, 0x6a, 0xc0, 0x42, 0x26, 0x02,
	0xe1, 0xaa, 0x3d, 0xc6, 0x5a, 0x96, 0x9d, 0x8a, 0xc1, 0xd4, 0xb9, 0x50, 0x12, 0x2f, 0xe1, 0x9c,
	0x85, 0x52, 0x4b, 0x1e, 0x68, 0x89, 0xc1, 0x50, 0xb2, 0x0f, 0x65, 0xb5, 0x4a, 0xcd, 0x97, 0xf4,
	0x3e, 0xa6, 0xe6, 0x5c, 0x91, 0xe7, 0x50, 0x52, 0x4b, 0x4d, 0x84, 0xb5, 0x82, 0x1f, 0xd7, 0x96,
	0xae, 0x08, 0x7e, 0xea, 0x5d, 0x24, 0x1c, 0x23, 0x20, 0x4d, 0x58, 0x93, 0x13, 0x37, 0x66, 0xdc,
	0xc5, 0xb5, 0x5a, 0xab, 0x26, 0xdf, 0x49, 0x87, 0xf1, 0x33, 0x85, 0x90, 0x16, 0x54, 0x69, 0xca,
	0x38, 0x1d, 0x30, 0x57, 0x4e, 0xdc, 0xfe, 0x8d, 0x64, 0xc2, 0x2a, 0xa3, 0x6a, 0xc3, 0xe0, 0xbd,
	0xc9, 0x99, 0x42, 0xc9, 0x29, 0x58, 0x53, 0x65, 0xc4, 0x7d, 0xc6, 0x45, 0x66, 0x5e, 0x40, 0xc7,
	0xae, 0xe1, 0x3f, 0x22, 0x7d, 0x1b, 0xe2, 0x05, 0x6c, 0x49, 0x4e, 0x7d, 0xa6, 0x0d, 0x82, 0x79,
	0x51, 0xe8, 0x5b, 0x15, 0x74, 0x6c, 0x6a, 0xa2, 0xc3, 0x78, 0x17, 0x61, 0xa5, 0xcd, 0x4c, 0x6e,
	0xb4, 0x6b, 0x5a, 0x1b, 0x4d, 0xa7, 0x35, 0xda, 0x27, 0xb0, 0xae, 0xf7, 0xc2, 0x5c, 0x2c, 0xd6,
	0x3a, 0xea, 0xd6, 0x10, 0xbc, 0xd2, 0x18, 0x06, 0x47, 0x11, 0x1d, 0xb3, 0xd0, 0xd7, 0x99, 0x5b,
	0x55, 0x13, 0x5c, 0x11, 0xaf, 0x15, 0x8e, 0x19, 0x93, 0xff, 0x02, 0xd1, 0x5a, 0x4f, 0x5d, 0x48,
	0x23, 0x23, 0xde, 0x42, 0x71, 0x15, 0x99, 0x73, 0x24, 0xe6, 0xd5, 0x9c, 0x51, 0x69, 0x8a, 0x62,
	0x91, 0xac, 0x1a, 0x09, 0xad, 0x7e, 0x0c, 0x3a, 0x2f, 0x53, 0x3b, 0x6b, 0x5b, 0x1f, 0x41, 0xc4,
	0x74, 0xbd, 0x66, 0x12, 0x5d, 0x14, 0x6b, 0x27, 0x23, 0xe9, 0x21, 0x44, 0x8e, 0x60, 0x1b, 0xfd,
	0xae, 0x48, 0xfa, 0xc2, 0xe3, 0x41, 0xac, 0x1a, 0x99, 0xb0, 0x76, 0x9b, 0x85, 0xd6, 0xba, 0x43,
	0x90, 0xea, 0x66, 0x19, 0x65, 0xc0, 0xd9, 0xe6, 0x0c, 0x35, 0x6d, 0x40, 0x2a, 0x6f, 0x38, 0x86,
	0x1d, 0x8f, 0x86, 0xfe, 0x68, 0xde, 0x51, 0x47, 0xc7, 0xb6, 0xe6, 0xf2, 0x96, 0xef, 0xa0, 0x61,
	0x9a, 0x8e, 0xcf, 0x62, 0x39, 0x9c, 0x33, 0x5a, 0x68, 0xb4, 0xb4, 0xe2, 0x8d, 0x12, 0xe4, 0xdd,
	0xa7, 0x50, 0x8f, 0x23, 0x11, 0xe0, 0x60, 0xce, 0xba, 0x87, 0xd6, 0xda, 0x2d, 0x9d, 0x37, 0xbe,
	0x82, 0x5d, 0xea, 0x79, 0x51, 0x12, 0xca, 0x39, 0x5b, 0x03, 0x6d, 0x3b, 0x86, 0xcc, 0x9b, 0xfe,
	0x0f, 0x7b, 0xd3, 0x5c, 0xa9, 0xa4, 0x73, 0xc6, 0x7d, 0x34, 0xd6, 0x4d, 0xaa, 0x54, 0xd2, 0xbc,
	0x57, 0x7d, 0x2a, 0x71, 0xec, 0xa6, 0x8c, 0x8b, 0x20, 0x0a, 0xf5, 0xb5, 0x70, 0x80, 0xdf, 0xe6,
	0x06, 0x8d, 0xe3, 0xcf, 0x1a, 0x56, 0xd7, 0x83, 0xea, 0x12, 0x19, 0xa5, 0xf5, 0x10, 0x45, 0x30,
	0x13, 0xa9, 0xa3, 0xeb, 0xa9, 0xcf, 0xf5, 0x56, 0xf2, 0x08, 0x25, 0x6b, 0x08, 0x4e, 0x45, 0xaa,
	0x25, 0x61, 0xd7, 0xf2, 0x13, 0x4e, 0x55, 0x0a, 0xd6, 0xa1, 0x69, 0x49, 0x0a, 0x7d, 0x63, 0x40,
	0x52, 0x83, 0x52, 0x12, 0x63, 0xa3, 0x68, 0xea, 0x3b, 0x4a, 0x8f, 0x54, 0xbb, 0xd7, 0x31, 0x02,
	0xdf, 0x7a, 0xac, 0xdb, 0x3d, 0x8e, 0x2f, 0x7d, 0xf2, 0x0e, 0xec, 0xdc, 0x8e, 0x25, 0xb1, 0x4f,
	0x25, 0x9b, 0x2f, 0xbf, 0x8d, 0xe5, 0x38, 0xcc, 0xec, 0xdc, 0x27, 0xad, 0xcb, 0x95, 0xc5, 0xb6,
	0xa0, 0xf6, 0x9e, 0x0a, 0x79, 0x36, 0x6b, 0xa6, 0xd3, 0xa6, 0x7e, 0x0c, 0xf5, 0x3b, 0x8c, 0xe9,
	0xec, 0x35, 0x28, 0xe5, 0x7a, 0xb1, 0x19, 0x9d, 0xfc, 0x5e, 0x84, 0xca, 0x79, 0xc4, 0x59, 0x97,
	0xf1, 0x34, 0xf0, 0x18, 0xe9, 0xc3, 0xd6, 0x9d, 0x8b, 0x9b, 0x3c, 0xfd, 0x47, 0xaf, 0x89, 0xc6,
	0x7f, 0xbe, 0x25, 0x33, 0xb9, 0x0c, 0x61, 0xfb, 0x9e, 0xf7, 0x12, 0x79, 0x96, 0xb3, 0x2f, 0x7e,
	0xbc, 0x35, 0x5a, 0xdf, 0x16, 0x9a, 0x48, 0x57, 0xb9, 0x5b, 0xe9, 0xd1, 0xa2, 0x9b, 0xcc, 0xcc,
	0x7b, 0xb8, 0x90, 0x37, 0xd3, 0xfd, 0x0c, 0x9b, 0x73, 0xf5, 0x25, 0x4f, 0x72, 0x9e, 0xfb, 0xf7,
	0xa5, 0xf1, 0xef, 0xbf, 0x17, 0x99, 0xd9, 0x3b, 0x50, 0xc9, 0xbc, 0x66, 0x48, 0x3e, 0x9b, 0xbb,
	0xaf, 0x9f, 0x46, 0x73, 0xb1, 0xc0, 0xcc, 0xf8, 0x0b, 0x6c, 0xce, 0x3d, 0x23, 0xe6, 0xf2, 0xbd,
	0xff, 0x1d, 0x34, 0x97, 0xef, 0x82, 0x97, 0x48, 0xab, 0xf0, 0xb2, 0x70, 0xf6, 0xfc, 0xa7, 0x67,
	0x5e, 0xe4, 0x33, 0xd4, 0xe3, 0xbb, 0xdb, 0x8b, 0x46, 0xed, 0x20, 0x3a, 0xc2, 0xdf, 0xe2, 0x28,
	0xf3, 0xe7, 0xa5, 0x5f, 0x42, 0xec, 0xd5, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x42, 0x8a, 0x1f,
	0xaa, 0xd2, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreServiceClient interface {
	// Submit a signed transaction
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
	// Propagate a chain event
	PropagateChainEvent(ctx context.Context, in *PropagateChainEventRequest, opts ...grpc.CallOption) (*PropagateChainEventResponse, error)
	// Get Statistics on Vega
	Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error)
	// Get the height of the last tendermint block
	LastBlockHeight(ctx context.Context, in *LastBlockHeightRequest, opts ...grpc.CallOption) (*LastBlockHeightResponse, error)
	// Get Time
	GetVegaTime(ctx context.Context, in *GetVegaTimeRequest, opts ...grpc.CallOption) (*GetVegaTimeResponse, error)
	// Subscribe to a stream of events from the core
	ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (CoreService_ObserveEventBusClient, error)
}

type coreServiceClient struct {
	cc *grpc.ClientConn
}

func NewCoreServiceClient(cc *grpc.ClientConn) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.CoreService/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) PropagateChainEvent(ctx context.Context, in *PropagateChainEventRequest, opts ...grpc.CallOption) (*PropagateChainEventResponse, error) {
	out := new(PropagateChainEventResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.CoreService/PropagateChainEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) Statistics(ctx context.Context, in *StatisticsRequest, opts ...grpc.CallOption) (*StatisticsResponse, error) {
	out := new(StatisticsResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.CoreService/Statistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) LastBlockHeight(ctx context.Context, in *LastBlockHeightRequest, opts ...grpc.CallOption) (*LastBlockHeightResponse, error) {
	out := new(LastBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.CoreService/LastBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetVegaTime(ctx context.Context, in *GetVegaTimeRequest, opts ...grpc.CallOption) (*GetVegaTimeResponse, error) {
	out := new(GetVegaTimeResponse)
	err := c.cc.Invoke(ctx, "/vega.api.v1.CoreService/GetVegaTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ObserveEventBus(ctx context.Context, opts ...grpc.CallOption) (CoreService_ObserveEventBusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CoreService_serviceDesc.Streams[0], "/vega.api.v1.CoreService/ObserveEventBus", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreServiceObserveEventBusClient{stream}
	return x, nil
}

type CoreService_ObserveEventBusClient interface {
	Send(*ObserveEventBusRequest) error
	Recv() (*ObserveEventBusResponse, error)
	grpc.ClientStream
}

type coreServiceObserveEventBusClient struct {
	grpc.ClientStream
}

func (x *coreServiceObserveEventBusClient) Send(m *ObserveEventBusRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coreServiceObserveEventBusClient) Recv() (*ObserveEventBusResponse, error) {
	m := new(ObserveEventBusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CoreServiceServer is the server API for CoreService service.
type CoreServiceServer interface {
	// Submit a signed transaction
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
	// Propagate a chain event
	PropagateChainEvent(context.Context, *PropagateChainEventRequest) (*PropagateChainEventResponse, error)
	// Get Statistics on Vega
	Statistics(context.Context, *StatisticsRequest) (*StatisticsResponse, error)
	// Get the height of the last tendermint block
	LastBlockHeight(context.Context, *LastBlockHeightRequest) (*LastBlockHeightResponse, error)
	// Get Time
	GetVegaTime(context.Context, *GetVegaTimeRequest) (*GetVegaTimeResponse, error)
	// Subscribe to a stream of events from the core
	ObserveEventBus(CoreService_ObserveEventBusServer) error
}

func RegisterCoreServiceServer(s *grpc.Server, srv CoreServiceServer) {
	s.RegisterService(&_CoreService_serviceDesc, srv)
}

func _CoreService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.CoreService/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_PropagateChainEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropagateChainEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).PropagateChainEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.CoreService/PropagateChainEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).PropagateChainEvent(ctx, req.(*PropagateChainEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.CoreService/Statistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).Statistics(ctx, req.(*StatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_LastBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).LastBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.CoreService/LastBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).LastBlockHeight(ctx, req.(*LastBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetVegaTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVegaTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetVegaTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vega.api.v1.CoreService/GetVegaTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetVegaTime(ctx, req.(*GetVegaTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ObserveEventBus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoreServiceServer).ObserveEventBus(&coreServiceObserveEventBusServer{stream})
}

type CoreService_ObserveEventBusServer interface {
	Send(*ObserveEventBusResponse) error
	Recv() (*ObserveEventBusRequest, error)
	grpc.ServerStream
}

type coreServiceObserveEventBusServer struct {
	grpc.ServerStream
}

func (x *coreServiceObserveEventBusServer) Send(m *ObserveEventBusResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coreServiceObserveEventBusServer) Recv() (*ObserveEventBusRequest, error) {
	m := new(ObserveEventBusRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vega.api.v1.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _CoreService_SubmitTransaction_Handler,
		},
		{
			MethodName: "PropagateChainEvent",
			Handler:    _CoreService_PropagateChainEvent_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _CoreService_Statistics_Handler,
		},
		{
			MethodName: "LastBlockHeight",
			Handler:    _CoreService_LastBlockHeight_Handler,
		},
		{
			MethodName: "GetVegaTime",
			Handler:    _CoreService_GetVegaTime_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveEventBus",
			Handler:       _CoreService_ObserveEventBus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vega/api/v1/core.proto",
}
