// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vega/events/v1/events.proto

package v1

import (
	vega "code.vegaprotocol.io/protos/vega"
	v1 "code.vegaprotocol.io/protos/vega/commands/v1"
	v11 "code.vegaprotocol.io/protos/vega/oracles/v1"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// An (event) bus event type is used to specify a type of event
// It has 2 styles of event:
// Single values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item
// Group values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items
type BusEventType int32

const (
	// Default value, always invalid
	BusEventType_BUS_EVENT_TYPE_UNSPECIFIED BusEventType = 0
	// Events of ALL event types, used when filtering stream from event bus
	BusEventType_BUS_EVENT_TYPE_ALL BusEventType = 1
	// Event for blockchain time updates
	BusEventType_BUS_EVENT_TYPE_TIME_UPDATE BusEventType = 2
	// Event for when a transfer happens internally, contains the transfer information
	BusEventType_BUS_EVENT_TYPE_TRANSFER_RESPONSES BusEventType = 3
	// Event indicating position resolution has occurred
	BusEventType_BUS_EVENT_TYPE_POSITION_RESOLUTION BusEventType = 4
	// Event for order updates, both new and existing orders
	BusEventType_BUS_EVENT_TYPE_ORDER BusEventType = 5
	// Event for account updates
	BusEventType_BUS_EVENT_TYPE_ACCOUNT BusEventType = 6
	// Event for party updates
	BusEventType_BUS_EVENT_TYPE_PARTY BusEventType = 7
	// Event indicating a new trade has occurred
	BusEventType_BUS_EVENT_TYPE_TRADE BusEventType = 8
	// Event indicating margin levels have changed for a party
	BusEventType_BUS_EVENT_TYPE_MARGIN_LEVELS BusEventType = 9
	// Event for proposal updates (for governance)
	BusEventType_BUS_EVENT_TYPE_PROPOSAL BusEventType = 10
	// Event indicating a new vote has occurred (for governance)
	BusEventType_BUS_EVENT_TYPE_VOTE BusEventType = 11
	// Event for market data updates
	BusEventType_BUS_EVENT_TYPE_MARKET_DATA BusEventType = 12
	// Event for a new signature for a Vega node
	BusEventType_BUS_EVENT_TYPE_NODE_SIGNATURE BusEventType = 13
	// Event indicating loss socialisation occurred for a party
	BusEventType_BUS_EVENT_TYPE_LOSS_SOCIALIZATION BusEventType = 14
	// Event for when a position is being settled
	BusEventType_BUS_EVENT_TYPE_SETTLE_POSITION BusEventType = 15
	// Event for when a position is distressed
	BusEventType_BUS_EVENT_TYPE_SETTLE_DISTRESSED BusEventType = 16
	// Event indicating a new market was created
	BusEventType_BUS_EVENT_TYPE_MARKET_CREATED BusEventType = 17
	// Event for when an asset is added to Vega
	BusEventType_BUS_EVENT_TYPE_ASSET BusEventType = 18
	// Event indicating a market tick event
	BusEventType_BUS_EVENT_TYPE_MARKET_TICK BusEventType = 19
	// Event for when a withdrawal occurs
	BusEventType_BUS_EVENT_TYPE_WITHDRAWAL BusEventType = 20
	// Event for when a deposit occurs
	BusEventType_BUS_EVENT_TYPE_DEPOSIT BusEventType = 21
	// Event indicating a change in auction state, for example starting or ending an auction
	BusEventType_BUS_EVENT_TYPE_AUCTION BusEventType = 22
	// Event indicating a risk factor has been updated
	BusEventType_BUS_EVENT_TYPE_RISK_FACTOR BusEventType = 23
	// Event indicating a network parameter has been added or updated
	BusEventType_BUS_EVENT_TYPE_NETWORK_PARAMETER BusEventType = 24
	// Event indicating a liquidity provision has been created or updated
	BusEventType_BUS_EVENT_TYPE_LIQUIDITY_PROVISION BusEventType = 25
	// Event indicating a new market was created
	BusEventType_BUS_EVENT_TYPE_MARKET_UPDATED BusEventType = 26
	// Event indicating an oracle spec has been created or updated
	BusEventType_BUS_EVENT_TYPE_ORACLE_SPEC BusEventType = 27
	// Event indicating that an oracle data has been broadcast
	BusEventType_BUS_EVENT_TYPE_ORACLE_DATA BusEventType = 28
	// Evetn indicating the start or end of an epoch
	BusEventType_BUS_EVENT_TYPE_EPOCH_UPDATE BusEventType = 29
	// Event indicating a market related event, for example when a market opens
	BusEventType_BUS_EVENT_TYPE_MARKET BusEventType = 101
	// Event used to report failed transactions back to a user, this is excluded from the ALL type
	BusEventType_BUS_EVENT_TYPE_TX_ERROR BusEventType = 201
)

var BusEventType_name = map[int32]string{
	0:   "BUS_EVENT_TYPE_UNSPECIFIED",
	1:   "BUS_EVENT_TYPE_ALL",
	2:   "BUS_EVENT_TYPE_TIME_UPDATE",
	3:   "BUS_EVENT_TYPE_TRANSFER_RESPONSES",
	4:   "BUS_EVENT_TYPE_POSITION_RESOLUTION",
	5:   "BUS_EVENT_TYPE_ORDER",
	6:   "BUS_EVENT_TYPE_ACCOUNT",
	7:   "BUS_EVENT_TYPE_PARTY",
	8:   "BUS_EVENT_TYPE_TRADE",
	9:   "BUS_EVENT_TYPE_MARGIN_LEVELS",
	10:  "BUS_EVENT_TYPE_PROPOSAL",
	11:  "BUS_EVENT_TYPE_VOTE",
	12:  "BUS_EVENT_TYPE_MARKET_DATA",
	13:  "BUS_EVENT_TYPE_NODE_SIGNATURE",
	14:  "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
	15:  "BUS_EVENT_TYPE_SETTLE_POSITION",
	16:  "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
	17:  "BUS_EVENT_TYPE_MARKET_CREATED",
	18:  "BUS_EVENT_TYPE_ASSET",
	19:  "BUS_EVENT_TYPE_MARKET_TICK",
	20:  "BUS_EVENT_TYPE_WITHDRAWAL",
	21:  "BUS_EVENT_TYPE_DEPOSIT",
	22:  "BUS_EVENT_TYPE_AUCTION",
	23:  "BUS_EVENT_TYPE_RISK_FACTOR",
	24:  "BUS_EVENT_TYPE_NETWORK_PARAMETER",
	25:  "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
	26:  "BUS_EVENT_TYPE_MARKET_UPDATED",
	27:  "BUS_EVENT_TYPE_ORACLE_SPEC",
	28:  "BUS_EVENT_TYPE_ORACLE_DATA",
	29:  "BUS_EVENT_TYPE_EPOCH_UPDATE",
	101: "BUS_EVENT_TYPE_MARKET",
	201: "BUS_EVENT_TYPE_TX_ERROR",
}

var BusEventType_value = map[string]int32{
	"BUS_EVENT_TYPE_UNSPECIFIED":         0,
	"BUS_EVENT_TYPE_ALL":                 1,
	"BUS_EVENT_TYPE_TIME_UPDATE":         2,
	"BUS_EVENT_TYPE_TRANSFER_RESPONSES":  3,
	"BUS_EVENT_TYPE_POSITION_RESOLUTION": 4,
	"BUS_EVENT_TYPE_ORDER":               5,
	"BUS_EVENT_TYPE_ACCOUNT":             6,
	"BUS_EVENT_TYPE_PARTY":               7,
	"BUS_EVENT_TYPE_TRADE":               8,
	"BUS_EVENT_TYPE_MARGIN_LEVELS":       9,
	"BUS_EVENT_TYPE_PROPOSAL":            10,
	"BUS_EVENT_TYPE_VOTE":                11,
	"BUS_EVENT_TYPE_MARKET_DATA":         12,
	"BUS_EVENT_TYPE_NODE_SIGNATURE":      13,
	"BUS_EVENT_TYPE_LOSS_SOCIALIZATION":  14,
	"BUS_EVENT_TYPE_SETTLE_POSITION":     15,
	"BUS_EVENT_TYPE_SETTLE_DISTRESSED":   16,
	"BUS_EVENT_TYPE_MARKET_CREATED":      17,
	"BUS_EVENT_TYPE_ASSET":               18,
	"BUS_EVENT_TYPE_MARKET_TICK":         19,
	"BUS_EVENT_TYPE_WITHDRAWAL":          20,
	"BUS_EVENT_TYPE_DEPOSIT":             21,
	"BUS_EVENT_TYPE_AUCTION":             22,
	"BUS_EVENT_TYPE_RISK_FACTOR":         23,
	"BUS_EVENT_TYPE_NETWORK_PARAMETER":   24,
	"BUS_EVENT_TYPE_LIQUIDITY_PROVISION": 25,
	"BUS_EVENT_TYPE_MARKET_UPDATED":      26,
	"BUS_EVENT_TYPE_ORACLE_SPEC":         27,
	"BUS_EVENT_TYPE_ORACLE_DATA":         28,
	"BUS_EVENT_TYPE_EPOCH_UPDATE":        29,
	"BUS_EVENT_TYPE_MARKET":              101,
	"BUS_EVENT_TYPE_TX_ERROR":            201,
}

func (x BusEventType) String() string {
	return proto.EnumName(BusEventType_name, int32(x))
}

func (BusEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{0}
}

// MarketEvent - the common denominator for all market events
// interface has a method to return a string for logging
type MarketEvent struct {
	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Payload is a unique information string
	Payload              string   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketEvent) Reset()         { *m = MarketEvent{} }
func (m *MarketEvent) String() string { return proto.CompactTextString(m) }
func (*MarketEvent) ProtoMessage()    {}
func (*MarketEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{0}
}

func (m *MarketEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketEvent.Unmarshal(m, b)
}
func (m *MarketEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketEvent.Marshal(b, m, deterministic)
}
func (m *MarketEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketEvent.Merge(m, src)
}
func (m *MarketEvent) XXX_Size() int {
	return xxx_messageInfo_MarketEvent.Size(m)
}
func (m *MarketEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MarketEvent proto.InternalMessageInfo

func (m *MarketEvent) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MarketEvent) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type TxErrorEvent struct {
	// Unique party identifier for the related party
	PartyId string `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// An error message describing what went wrong
	ErrMsg string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	// The transaction that failed
	//
	// Types that are valid to be assigned to Transaction:
	//	*TxErrorEvent_OrderSubmission
	//	*TxErrorEvent_OrderAmendment
	//	*TxErrorEvent_OrderCancellation
	//	*TxErrorEvent_Proposal
	//	*TxErrorEvent_VoteSubmission
	//	*TxErrorEvent_LiquidityProvisionSubmission
	//	*TxErrorEvent_WithdrawSubmission
	Transaction          isTxErrorEvent_Transaction `protobuf_oneof:"transaction"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TxErrorEvent) Reset()         { *m = TxErrorEvent{} }
func (m *TxErrorEvent) String() string { return proto.CompactTextString(m) }
func (*TxErrorEvent) ProtoMessage()    {}
func (*TxErrorEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{1}
}

func (m *TxErrorEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxErrorEvent.Unmarshal(m, b)
}
func (m *TxErrorEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxErrorEvent.Marshal(b, m, deterministic)
}
func (m *TxErrorEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxErrorEvent.Merge(m, src)
}
func (m *TxErrorEvent) XXX_Size() int {
	return xxx_messageInfo_TxErrorEvent.Size(m)
}
func (m *TxErrorEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TxErrorEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TxErrorEvent proto.InternalMessageInfo

func (m *TxErrorEvent) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *TxErrorEvent) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type isTxErrorEvent_Transaction interface {
	isTxErrorEvent_Transaction()
}

type TxErrorEvent_OrderSubmission struct {
	OrderSubmission *v1.OrderSubmission `protobuf:"bytes,101,opt,name=order_submission,json=orderSubmission,proto3,oneof"`
}

type TxErrorEvent_OrderAmendment struct {
	OrderAmendment *v1.OrderAmendment `protobuf:"bytes,102,opt,name=order_amendment,json=orderAmendment,proto3,oneof"`
}

type TxErrorEvent_OrderCancellation struct {
	OrderCancellation *v1.OrderCancellation `protobuf:"bytes,103,opt,name=order_cancellation,json=orderCancellation,proto3,oneof"`
}

type TxErrorEvent_Proposal struct {
	Proposal *v1.ProposalSubmission `protobuf:"bytes,104,opt,name=proposal,proto3,oneof"`
}

type TxErrorEvent_VoteSubmission struct {
	VoteSubmission *v1.VoteSubmission `protobuf:"bytes,105,opt,name=vote_submission,json=voteSubmission,proto3,oneof"`
}

type TxErrorEvent_LiquidityProvisionSubmission struct {
	LiquidityProvisionSubmission *v1.LiquidityProvisionSubmission `protobuf:"bytes,106,opt,name=liquidity_provision_submission,json=liquidityProvisionSubmission,proto3,oneof"`
}

type TxErrorEvent_WithdrawSubmission struct {
	WithdrawSubmission *v1.WithdrawSubmission `protobuf:"bytes,107,opt,name=withdraw_submission,json=withdrawSubmission,proto3,oneof"`
}

func (*TxErrorEvent_OrderSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_OrderAmendment) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_OrderCancellation) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_Proposal) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_VoteSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_LiquidityProvisionSubmission) isTxErrorEvent_Transaction() {}

func (*TxErrorEvent_WithdrawSubmission) isTxErrorEvent_Transaction() {}

func (m *TxErrorEvent) GetTransaction() isTxErrorEvent_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TxErrorEvent) GetOrderSubmission() *v1.OrderSubmission {
	if x, ok := m.GetTransaction().(*TxErrorEvent_OrderSubmission); ok {
		return x.OrderSubmission
	}
	return nil
}

func (m *TxErrorEvent) GetOrderAmendment() *v1.OrderAmendment {
	if x, ok := m.GetTransaction().(*TxErrorEvent_OrderAmendment); ok {
		return x.OrderAmendment
	}
	return nil
}

func (m *TxErrorEvent) GetOrderCancellation() *v1.OrderCancellation {
	if x, ok := m.GetTransaction().(*TxErrorEvent_OrderCancellation); ok {
		return x.OrderCancellation
	}
	return nil
}

func (m *TxErrorEvent) GetProposal() *v1.ProposalSubmission {
	if x, ok := m.GetTransaction().(*TxErrorEvent_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (m *TxErrorEvent) GetVoteSubmission() *v1.VoteSubmission {
	if x, ok := m.GetTransaction().(*TxErrorEvent_VoteSubmission); ok {
		return x.VoteSubmission
	}
	return nil
}

func (m *TxErrorEvent) GetLiquidityProvisionSubmission() *v1.LiquidityProvisionSubmission {
	if x, ok := m.GetTransaction().(*TxErrorEvent_LiquidityProvisionSubmission); ok {
		return x.LiquidityProvisionSubmission
	}
	return nil
}

func (m *TxErrorEvent) GetWithdrawSubmission() *v1.WithdrawSubmission {
	if x, ok := m.GetTransaction().(*TxErrorEvent_WithdrawSubmission); ok {
		return x.WithdrawSubmission
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TxErrorEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TxErrorEvent_OrderSubmission)(nil),
		(*TxErrorEvent_OrderAmendment)(nil),
		(*TxErrorEvent_OrderCancellation)(nil),
		(*TxErrorEvent_Proposal)(nil),
		(*TxErrorEvent_VoteSubmission)(nil),
		(*TxErrorEvent_LiquidityProvisionSubmission)(nil),
		(*TxErrorEvent_WithdrawSubmission)(nil),
	}
}

// A time update event contains the latest time update from Vega blockchain
type TimeUpdate struct {
	// Timestamp containing latest update from Vega blockchain aka Vega-time
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeUpdate) Reset()         { *m = TimeUpdate{} }
func (m *TimeUpdate) String() string { return proto.CompactTextString(m) }
func (*TimeUpdate) ProtoMessage()    {}
func (*TimeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{2}
}

func (m *TimeUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeUpdate.Unmarshal(m, b)
}
func (m *TimeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeUpdate.Marshal(b, m, deterministic)
}
func (m *TimeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeUpdate.Merge(m, src)
}
func (m *TimeUpdate) XXX_Size() int {
	return xxx_messageInfo_TimeUpdate.Size(m)
}
func (m *TimeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TimeUpdate proto.InternalMessageInfo

func (m *TimeUpdate) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Epoch details
type EpochEvent struct {
	// Unique identifier that increases by one each epoch
	UniqueId uint64 `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	// What time did this epoch start
	StartTime int64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// What time should this epoch end
	ExpireTime int64 `protobuf:"varint,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// What time did it actually end
	EndTime              int64    `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EpochEvent) Reset()         { *m = EpochEvent{} }
func (m *EpochEvent) String() string { return proto.CompactTextString(m) }
func (*EpochEvent) ProtoMessage()    {}
func (*EpochEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{3}
}

func (m *EpochEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EpochEvent.Unmarshal(m, b)
}
func (m *EpochEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EpochEvent.Marshal(b, m, deterministic)
}
func (m *EpochEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochEvent.Merge(m, src)
}
func (m *EpochEvent) XXX_Size() int {
	return xxx_messageInfo_EpochEvent.Size(m)
}
func (m *EpochEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EpochEvent proto.InternalMessageInfo

func (m *EpochEvent) GetUniqueId() uint64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *EpochEvent) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *EpochEvent) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *EpochEvent) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// A transfer responses event contains a collection of transfer information
type TransferResponses struct {
	// One or more entries containing internal transfer information
	Responses            []*vega.TransferResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TransferResponses) Reset()         { *m = TransferResponses{} }
func (m *TransferResponses) String() string { return proto.CompactTextString(m) }
func (*TransferResponses) ProtoMessage()    {}
func (*TransferResponses) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{4}
}

func (m *TransferResponses) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferResponses.Unmarshal(m, b)
}
func (m *TransferResponses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferResponses.Marshal(b, m, deterministic)
}
func (m *TransferResponses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferResponses.Merge(m, src)
}
func (m *TransferResponses) XXX_Size() int {
	return xxx_messageInfo_TransferResponses.Size(m)
}
func (m *TransferResponses) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferResponses.DiscardUnknown(m)
}

var xxx_messageInfo_TransferResponses proto.InternalMessageInfo

func (m *TransferResponses) GetResponses() []*vega.TransferResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

// A position resolution event contains information on distressed trades
type PositionResolution struct {
	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Number of distressed traders
	Distressed int64 `protobuf:"varint,2,opt,name=distressed,proto3" json:"distressed,omitempty"`
	// Number of close outs
	Closed int64 `protobuf:"varint,3,opt,name=closed,proto3" json:"closed,omitempty"`
	// Mark price, as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	MarkPrice            uint64   `protobuf:"varint,4,opt,name=mark_price,json=markPrice,proto3" json:"mark_price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PositionResolution) Reset()         { *m = PositionResolution{} }
func (m *PositionResolution) String() string { return proto.CompactTextString(m) }
func (*PositionResolution) ProtoMessage()    {}
func (*PositionResolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{5}
}

func (m *PositionResolution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PositionResolution.Unmarshal(m, b)
}
func (m *PositionResolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PositionResolution.Marshal(b, m, deterministic)
}
func (m *PositionResolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionResolution.Merge(m, src)
}
func (m *PositionResolution) XXX_Size() int {
	return xxx_messageInfo_PositionResolution.Size(m)
}
func (m *PositionResolution) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionResolution.DiscardUnknown(m)
}

var xxx_messageInfo_PositionResolution proto.InternalMessageInfo

func (m *PositionResolution) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *PositionResolution) GetDistressed() int64 {
	if m != nil {
		return m.Distressed
	}
	return 0
}

func (m *PositionResolution) GetClosed() int64 {
	if m != nil {
		return m.Closed
	}
	return 0
}

func (m *PositionResolution) GetMarkPrice() uint64 {
	if m != nil {
		return m.MarkPrice
	}
	return 0
}

// A loss socialization event contains details on the amount of wins unable to be distributed
type LossSocialization struct {
	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier (public key) for the event
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Amount distributed
	Amount               int64    `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LossSocialization) Reset()         { *m = LossSocialization{} }
func (m *LossSocialization) String() string { return proto.CompactTextString(m) }
func (*LossSocialization) ProtoMessage()    {}
func (*LossSocialization) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{6}
}

func (m *LossSocialization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LossSocialization.Unmarshal(m, b)
}
func (m *LossSocialization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LossSocialization.Marshal(b, m, deterministic)
}
func (m *LossSocialization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LossSocialization.Merge(m, src)
}
func (m *LossSocialization) XXX_Size() int {
	return xxx_messageInfo_LossSocialization.Size(m)
}
func (m *LossSocialization) XXX_DiscardUnknown() {
	xxx_messageInfo_LossSocialization.DiscardUnknown(m)
}

var xxx_messageInfo_LossSocialization proto.InternalMessageInfo

func (m *LossSocialization) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *LossSocialization) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *LossSocialization) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// A trade settlement is part of the settle position event
type TradeSettlement struct {
	// Size of trade settlement
	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Price of settlement as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price                uint64   `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TradeSettlement) Reset()         { *m = TradeSettlement{} }
func (m *TradeSettlement) String() string { return proto.CompactTextString(m) }
func (*TradeSettlement) ProtoMessage()    {}
func (*TradeSettlement) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{7}
}

func (m *TradeSettlement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeSettlement.Unmarshal(m, b)
}
func (m *TradeSettlement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeSettlement.Marshal(b, m, deterministic)
}
func (m *TradeSettlement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeSettlement.Merge(m, src)
}
func (m *TradeSettlement) XXX_Size() int {
	return xxx_messageInfo_TradeSettlement.Size(m)
}
func (m *TradeSettlement) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeSettlement.DiscardUnknown(m)
}

var xxx_messageInfo_TradeSettlement proto.InternalMessageInfo

func (m *TradeSettlement) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *TradeSettlement) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// A settle position event contains position settlement information for a party
type SettlePosition struct {
	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier (public key) for the event
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Price of settlement as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	// A collection of 1 or more trade settlements
	TradeSettlements     []*TradeSettlement `protobuf:"bytes,4,rep,name=trade_settlements,json=tradeSettlements,proto3" json:"trade_settlements,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SettlePosition) Reset()         { *m = SettlePosition{} }
func (m *SettlePosition) String() string { return proto.CompactTextString(m) }
func (*SettlePosition) ProtoMessage()    {}
func (*SettlePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{8}
}

func (m *SettlePosition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettlePosition.Unmarshal(m, b)
}
func (m *SettlePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettlePosition.Marshal(b, m, deterministic)
}
func (m *SettlePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettlePosition.Merge(m, src)
}
func (m *SettlePosition) XXX_Size() int {
	return xxx_messageInfo_SettlePosition.Size(m)
}
func (m *SettlePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_SettlePosition.DiscardUnknown(m)
}

var xxx_messageInfo_SettlePosition proto.InternalMessageInfo

func (m *SettlePosition) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *SettlePosition) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *SettlePosition) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SettlePosition) GetTradeSettlements() []*TradeSettlement {
	if m != nil {
		return m.TradeSettlements
	}
	return nil
}

// A settle distressed event contains information on distressed trading parties who are closed out
type SettleDistressed struct {
	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// Party identifier (public key) for the event
	PartyId string `protobuf:"bytes,2,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
	// Margin value as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Margin uint64 `protobuf:"varint,3,opt,name=margin,proto3" json:"margin,omitempty"`
	// Price as an integer, for example `123456` is a correctly
	// formatted price of `1.23456` assuming market configured to 5 decimal places
	Price                uint64   `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettleDistressed) Reset()         { *m = SettleDistressed{} }
func (m *SettleDistressed) String() string { return proto.CompactTextString(m) }
func (*SettleDistressed) ProtoMessage()    {}
func (*SettleDistressed) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{9}
}

func (m *SettleDistressed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettleDistressed.Unmarshal(m, b)
}
func (m *SettleDistressed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettleDistressed.Marshal(b, m, deterministic)
}
func (m *SettleDistressed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleDistressed.Merge(m, src)
}
func (m *SettleDistressed) XXX_Size() int {
	return xxx_messageInfo_SettleDistressed.Size(m)
}
func (m *SettleDistressed) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleDistressed.DiscardUnknown(m)
}

var xxx_messageInfo_SettleDistressed proto.InternalMessageInfo

func (m *SettleDistressed) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *SettleDistressed) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *SettleDistressed) GetMargin() uint64 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *SettleDistressed) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

// A market ticket event contains the time value for when a particular market was last processed on Vega
type MarketTick struct {
	// Market identifier for the event
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp containing latest update from Vega blockchain aka Vega-time
	Time                 int64    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MarketTick) Reset()         { *m = MarketTick{} }
func (m *MarketTick) String() string { return proto.CompactTextString(m) }
func (*MarketTick) ProtoMessage()    {}
func (*MarketTick) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{10}
}

func (m *MarketTick) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketTick.Unmarshal(m, b)
}
func (m *MarketTick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketTick.Marshal(b, m, deterministic)
}
func (m *MarketTick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketTick.Merge(m, src)
}
func (m *MarketTick) XXX_Size() int {
	return xxx_messageInfo_MarketTick.Size(m)
}
func (m *MarketTick) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketTick.DiscardUnknown(m)
}

var xxx_messageInfo_MarketTick proto.InternalMessageInfo

func (m *MarketTick) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MarketTick) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// An auction event indicating a change in auction state, for example starting or ending an auction
type AuctionEvent struct {
	// Market identifier for the event
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// True if the event indicates an auction opening and False otherwise
	OpeningAuction bool `protobuf:"varint,2,opt,name=opening_auction,json=openingAuction,proto3" json:"opening_auction,omitempty"`
	// True if the event indicates leaving auction mode and False otherwise
	Leave bool `protobuf:"varint,3,opt,name=leave,proto3" json:"leave,omitempty"`
	// Timestamp containing the start time for an auction
	Start int64 `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	// Timestamp containing the end time for an auction
	End int64 `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
	// the reason this market is/was in auction
	Trigger vega.AuctionTrigger `protobuf:"varint,6,opt,name=trigger,proto3,enum=vega.AuctionTrigger" json:"trigger,omitempty"`
	// If an auction was ongoing, but was extended for whatever reason, this field will
	// be set to the trigger type indicating which component extended the auction
	ExtensionTrigger     vega.AuctionTrigger `protobuf:"varint,7,opt,name=extension_trigger,json=extensionTrigger,proto3,enum=vega.AuctionTrigger" json:"extension_trigger,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AuctionEvent) Reset()         { *m = AuctionEvent{} }
func (m *AuctionEvent) String() string { return proto.CompactTextString(m) }
func (*AuctionEvent) ProtoMessage()    {}
func (*AuctionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{11}
}

func (m *AuctionEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuctionEvent.Unmarshal(m, b)
}
func (m *AuctionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuctionEvent.Marshal(b, m, deterministic)
}
func (m *AuctionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionEvent.Merge(m, src)
}
func (m *AuctionEvent) XXX_Size() int {
	return xxx_messageInfo_AuctionEvent.Size(m)
}
func (m *AuctionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionEvent proto.InternalMessageInfo

func (m *AuctionEvent) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *AuctionEvent) GetOpeningAuction() bool {
	if m != nil {
		return m.OpeningAuction
	}
	return false
}

func (m *AuctionEvent) GetLeave() bool {
	if m != nil {
		return m.Leave
	}
	return false
}

func (m *AuctionEvent) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *AuctionEvent) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *AuctionEvent) GetTrigger() vega.AuctionTrigger {
	if m != nil {
		return m.Trigger
	}
	return vega.AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED
}

func (m *AuctionEvent) GetExtensionTrigger() vega.AuctionTrigger {
	if m != nil {
		return m.ExtensionTrigger
	}
	return vega.AuctionTrigger_AUCTION_TRIGGER_UNSPECIFIED
}

// A bus event is a container for event bus events emitted by Vega
type BusEvent struct {
	// A unique event identifier for the message
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The batch (or block) of transactions that the events relate to
	Block string `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	// The type of bus event (one of the list below)
	Type BusEventType `protobuf:"varint,3,opt,name=type,proto3,enum=vega.events.v1.BusEventType" json:"type,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*BusEvent_TimeUpdate
	//	*BusEvent_TransferResponses
	//	*BusEvent_PositionResolution
	//	*BusEvent_Order
	//	*BusEvent_Account
	//	*BusEvent_Party
	//	*BusEvent_Trade
	//	*BusEvent_MarginLevels
	//	*BusEvent_Proposal
	//	*BusEvent_Vote
	//	*BusEvent_MarketData
	//	*BusEvent_NodeSignature
	//	*BusEvent_LossSocialization
	//	*BusEvent_SettlePosition
	//	*BusEvent_SettleDistressed
	//	*BusEvent_MarketCreated
	//	*BusEvent_Asset
	//	*BusEvent_MarketTick
	//	*BusEvent_Withdrawal
	//	*BusEvent_Deposit
	//	*BusEvent_Auction
	//	*BusEvent_RiskFactor
	//	*BusEvent_NetworkParameter
	//	*BusEvent_LiquidityProvision
	//	*BusEvent_MarketUpdated
	//	*BusEvent_OracleSpec
	//	*BusEvent_OracleData
	//	*BusEvent_EpochEvent
	//	*BusEvent_Market
	//	*BusEvent_TxErrEvent
	Event                isBusEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BusEvent) Reset()         { *m = BusEvent{} }
func (m *BusEvent) String() string { return proto.CompactTextString(m) }
func (*BusEvent) ProtoMessage()    {}
func (*BusEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2565b4e8491d341a, []int{12}
}

func (m *BusEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BusEvent.Unmarshal(m, b)
}
func (m *BusEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BusEvent.Marshal(b, m, deterministic)
}
func (m *BusEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusEvent.Merge(m, src)
}
func (m *BusEvent) XXX_Size() int {
	return xxx_messageInfo_BusEvent.Size(m)
}
func (m *BusEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BusEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BusEvent proto.InternalMessageInfo

func (m *BusEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BusEvent) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

func (m *BusEvent) GetType() BusEventType {
	if m != nil {
		return m.Type
	}
	return BusEventType_BUS_EVENT_TYPE_UNSPECIFIED
}

type isBusEvent_Event interface {
	isBusEvent_Event()
}

type BusEvent_TimeUpdate struct {
	TimeUpdate *TimeUpdate `protobuf:"bytes,101,opt,name=time_update,json=timeUpdate,proto3,oneof"`
}

type BusEvent_TransferResponses struct {
	TransferResponses *TransferResponses `protobuf:"bytes,102,opt,name=transfer_responses,json=transferResponses,proto3,oneof"`
}

type BusEvent_PositionResolution struct {
	PositionResolution *PositionResolution `protobuf:"bytes,103,opt,name=position_resolution,json=positionResolution,proto3,oneof"`
}

type BusEvent_Order struct {
	Order *vega.Order `protobuf:"bytes,104,opt,name=order,proto3,oneof"`
}

type BusEvent_Account struct {
	Account *vega.Account `protobuf:"bytes,105,opt,name=account,proto3,oneof"`
}

type BusEvent_Party struct {
	Party *vega.Party `protobuf:"bytes,106,opt,name=party,proto3,oneof"`
}

type BusEvent_Trade struct {
	Trade *vega.Trade `protobuf:"bytes,107,opt,name=trade,proto3,oneof"`
}

type BusEvent_MarginLevels struct {
	MarginLevels *vega.MarginLevels `protobuf:"bytes,108,opt,name=margin_levels,json=marginLevels,proto3,oneof"`
}

type BusEvent_Proposal struct {
	Proposal *vega.Proposal `protobuf:"bytes,109,opt,name=proposal,proto3,oneof"`
}

type BusEvent_Vote struct {
	Vote *vega.Vote `protobuf:"bytes,110,opt,name=vote,proto3,oneof"`
}

type BusEvent_MarketData struct {
	MarketData *vega.MarketData `protobuf:"bytes,111,opt,name=market_data,json=marketData,proto3,oneof"`
}

type BusEvent_NodeSignature struct {
	NodeSignature *v1.NodeSignature `protobuf:"bytes,112,opt,name=node_signature,json=nodeSignature,proto3,oneof"`
}

type BusEvent_LossSocialization struct {
	LossSocialization *LossSocialization `protobuf:"bytes,113,opt,name=loss_socialization,json=lossSocialization,proto3,oneof"`
}

type BusEvent_SettlePosition struct {
	SettlePosition *SettlePosition `protobuf:"bytes,114,opt,name=settle_position,json=settlePosition,proto3,oneof"`
}

type BusEvent_SettleDistressed struct {
	SettleDistressed *SettleDistressed `protobuf:"bytes,115,opt,name=settle_distressed,json=settleDistressed,proto3,oneof"`
}

type BusEvent_MarketCreated struct {
	MarketCreated *vega.Market `protobuf:"bytes,116,opt,name=market_created,json=marketCreated,proto3,oneof"`
}

type BusEvent_Asset struct {
	Asset *vega.Asset `protobuf:"bytes,117,opt,name=asset,proto3,oneof"`
}

type BusEvent_MarketTick struct {
	MarketTick *MarketTick `protobuf:"bytes,118,opt,name=market_tick,json=marketTick,proto3,oneof"`
}

type BusEvent_Withdrawal struct {
	Withdrawal *vega.Withdrawal `protobuf:"bytes,119,opt,name=withdrawal,proto3,oneof"`
}

type BusEvent_Deposit struct {
	Deposit *vega.Deposit `protobuf:"bytes,120,opt,name=deposit,proto3,oneof"`
}

type BusEvent_Auction struct {
	Auction *AuctionEvent `protobuf:"bytes,121,opt,name=auction,proto3,oneof"`
}

type BusEvent_RiskFactor struct {
	RiskFactor *vega.RiskFactor `protobuf:"bytes,122,opt,name=risk_factor,json=riskFactor,proto3,oneof"`
}

type BusEvent_NetworkParameter struct {
	NetworkParameter *vega.NetworkParameter `protobuf:"bytes,123,opt,name=network_parameter,json=networkParameter,proto3,oneof"`
}

type BusEvent_LiquidityProvision struct {
	LiquidityProvision *vega.LiquidityProvision `protobuf:"bytes,124,opt,name=liquidity_provision,json=liquidityProvision,proto3,oneof"`
}

type BusEvent_MarketUpdated struct {
	MarketUpdated *vega.Market `protobuf:"bytes,125,opt,name=market_updated,json=marketUpdated,proto3,oneof"`
}

type BusEvent_OracleSpec struct {
	OracleSpec *v11.OracleSpec `protobuf:"bytes,126,opt,name=oracle_spec,json=oracleSpec,proto3,oneof"`
}

type BusEvent_OracleData struct {
	OracleData *v11.OracleData `protobuf:"bytes,127,opt,name=oracle_data,json=oracleData,proto3,oneof"`
}

type BusEvent_EpochEvent struct {
	EpochEvent *EpochEvent `protobuf:"bytes,128,opt,name=epoch_event,json=epochEvent,proto3,oneof"`
}

type BusEvent_Market struct {
	Market *MarketEvent `protobuf:"bytes,1001,opt,name=market,proto3,oneof"`
}

type BusEvent_TxErrEvent struct {
	TxErrEvent *TxErrorEvent `protobuf:"bytes,2001,opt,name=tx_err_event,json=txErrEvent,proto3,oneof"`
}

func (*BusEvent_TimeUpdate) isBusEvent_Event() {}

func (*BusEvent_TransferResponses) isBusEvent_Event() {}

func (*BusEvent_PositionResolution) isBusEvent_Event() {}

func (*BusEvent_Order) isBusEvent_Event() {}

func (*BusEvent_Account) isBusEvent_Event() {}

func (*BusEvent_Party) isBusEvent_Event() {}

func (*BusEvent_Trade) isBusEvent_Event() {}

func (*BusEvent_MarginLevels) isBusEvent_Event() {}

func (*BusEvent_Proposal) isBusEvent_Event() {}

func (*BusEvent_Vote) isBusEvent_Event() {}

func (*BusEvent_MarketData) isBusEvent_Event() {}

func (*BusEvent_NodeSignature) isBusEvent_Event() {}

func (*BusEvent_LossSocialization) isBusEvent_Event() {}

func (*BusEvent_SettlePosition) isBusEvent_Event() {}

func (*BusEvent_SettleDistressed) isBusEvent_Event() {}

func (*BusEvent_MarketCreated) isBusEvent_Event() {}

func (*BusEvent_Asset) isBusEvent_Event() {}

func (*BusEvent_MarketTick) isBusEvent_Event() {}

func (*BusEvent_Withdrawal) isBusEvent_Event() {}

func (*BusEvent_Deposit) isBusEvent_Event() {}

func (*BusEvent_Auction) isBusEvent_Event() {}

func (*BusEvent_RiskFactor) isBusEvent_Event() {}

func (*BusEvent_NetworkParameter) isBusEvent_Event() {}

func (*BusEvent_LiquidityProvision) isBusEvent_Event() {}

func (*BusEvent_MarketUpdated) isBusEvent_Event() {}

func (*BusEvent_OracleSpec) isBusEvent_Event() {}

func (*BusEvent_OracleData) isBusEvent_Event() {}

func (*BusEvent_EpochEvent) isBusEvent_Event() {}

func (*BusEvent_Market) isBusEvent_Event() {}

func (*BusEvent_TxErrEvent) isBusEvent_Event() {}

func (m *BusEvent) GetEvent() isBusEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *BusEvent) GetTimeUpdate() *TimeUpdate {
	if x, ok := m.GetEvent().(*BusEvent_TimeUpdate); ok {
		return x.TimeUpdate
	}
	return nil
}

func (m *BusEvent) GetTransferResponses() *TransferResponses {
	if x, ok := m.GetEvent().(*BusEvent_TransferResponses); ok {
		return x.TransferResponses
	}
	return nil
}

func (m *BusEvent) GetPositionResolution() *PositionResolution {
	if x, ok := m.GetEvent().(*BusEvent_PositionResolution); ok {
		return x.PositionResolution
	}
	return nil
}

func (m *BusEvent) GetOrder() *vega.Order {
	if x, ok := m.GetEvent().(*BusEvent_Order); ok {
		return x.Order
	}
	return nil
}

func (m *BusEvent) GetAccount() *vega.Account {
	if x, ok := m.GetEvent().(*BusEvent_Account); ok {
		return x.Account
	}
	return nil
}

func (m *BusEvent) GetParty() *vega.Party {
	if x, ok := m.GetEvent().(*BusEvent_Party); ok {
		return x.Party
	}
	return nil
}

func (m *BusEvent) GetTrade() *vega.Trade {
	if x, ok := m.GetEvent().(*BusEvent_Trade); ok {
		return x.Trade
	}
	return nil
}

func (m *BusEvent) GetMarginLevels() *vega.MarginLevels {
	if x, ok := m.GetEvent().(*BusEvent_MarginLevels); ok {
		return x.MarginLevels
	}
	return nil
}

func (m *BusEvent) GetProposal() *vega.Proposal {
	if x, ok := m.GetEvent().(*BusEvent_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (m *BusEvent) GetVote() *vega.Vote {
	if x, ok := m.GetEvent().(*BusEvent_Vote); ok {
		return x.Vote
	}
	return nil
}

func (m *BusEvent) GetMarketData() *vega.MarketData {
	if x, ok := m.GetEvent().(*BusEvent_MarketData); ok {
		return x.MarketData
	}
	return nil
}

func (m *BusEvent) GetNodeSignature() *v1.NodeSignature {
	if x, ok := m.GetEvent().(*BusEvent_NodeSignature); ok {
		return x.NodeSignature
	}
	return nil
}

func (m *BusEvent) GetLossSocialization() *LossSocialization {
	if x, ok := m.GetEvent().(*BusEvent_LossSocialization); ok {
		return x.LossSocialization
	}
	return nil
}

func (m *BusEvent) GetSettlePosition() *SettlePosition {
	if x, ok := m.GetEvent().(*BusEvent_SettlePosition); ok {
		return x.SettlePosition
	}
	return nil
}

func (m *BusEvent) GetSettleDistressed() *SettleDistressed {
	if x, ok := m.GetEvent().(*BusEvent_SettleDistressed); ok {
		return x.SettleDistressed
	}
	return nil
}

func (m *BusEvent) GetMarketCreated() *vega.Market {
	if x, ok := m.GetEvent().(*BusEvent_MarketCreated); ok {
		return x.MarketCreated
	}
	return nil
}

func (m *BusEvent) GetAsset() *vega.Asset {
	if x, ok := m.GetEvent().(*BusEvent_Asset); ok {
		return x.Asset
	}
	return nil
}

func (m *BusEvent) GetMarketTick() *MarketTick {
	if x, ok := m.GetEvent().(*BusEvent_MarketTick); ok {
		return x.MarketTick
	}
	return nil
}

func (m *BusEvent) GetWithdrawal() *vega.Withdrawal {
	if x, ok := m.GetEvent().(*BusEvent_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

func (m *BusEvent) GetDeposit() *vega.Deposit {
	if x, ok := m.GetEvent().(*BusEvent_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (m *BusEvent) GetAuction() *AuctionEvent {
	if x, ok := m.GetEvent().(*BusEvent_Auction); ok {
		return x.Auction
	}
	return nil
}

func (m *BusEvent) GetRiskFactor() *vega.RiskFactor {
	if x, ok := m.GetEvent().(*BusEvent_RiskFactor); ok {
		return x.RiskFactor
	}
	return nil
}

func (m *BusEvent) GetNetworkParameter() *vega.NetworkParameter {
	if x, ok := m.GetEvent().(*BusEvent_NetworkParameter); ok {
		return x.NetworkParameter
	}
	return nil
}

func (m *BusEvent) GetLiquidityProvision() *vega.LiquidityProvision {
	if x, ok := m.GetEvent().(*BusEvent_LiquidityProvision); ok {
		return x.LiquidityProvision
	}
	return nil
}

func (m *BusEvent) GetMarketUpdated() *vega.Market {
	if x, ok := m.GetEvent().(*BusEvent_MarketUpdated); ok {
		return x.MarketUpdated
	}
	return nil
}

func (m *BusEvent) GetOracleSpec() *v11.OracleSpec {
	if x, ok := m.GetEvent().(*BusEvent_OracleSpec); ok {
		return x.OracleSpec
	}
	return nil
}

func (m *BusEvent) GetOracleData() *v11.OracleData {
	if x, ok := m.GetEvent().(*BusEvent_OracleData); ok {
		return x.OracleData
	}
	return nil
}

func (m *BusEvent) GetEpochEvent() *EpochEvent {
	if x, ok := m.GetEvent().(*BusEvent_EpochEvent); ok {
		return x.EpochEvent
	}
	return nil
}

func (m *BusEvent) GetMarket() *MarketEvent {
	if x, ok := m.GetEvent().(*BusEvent_Market); ok {
		return x.Market
	}
	return nil
}

func (m *BusEvent) GetTxErrEvent() *TxErrorEvent {
	if x, ok := m.GetEvent().(*BusEvent_TxErrEvent); ok {
		return x.TxErrEvent
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BusEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BusEvent_TimeUpdate)(nil),
		(*BusEvent_TransferResponses)(nil),
		(*BusEvent_PositionResolution)(nil),
		(*BusEvent_Order)(nil),
		(*BusEvent_Account)(nil),
		(*BusEvent_Party)(nil),
		(*BusEvent_Trade)(nil),
		(*BusEvent_MarginLevels)(nil),
		(*BusEvent_Proposal)(nil),
		(*BusEvent_Vote)(nil),
		(*BusEvent_MarketData)(nil),
		(*BusEvent_NodeSignature)(nil),
		(*BusEvent_LossSocialization)(nil),
		(*BusEvent_SettlePosition)(nil),
		(*BusEvent_SettleDistressed)(nil),
		(*BusEvent_MarketCreated)(nil),
		(*BusEvent_Asset)(nil),
		(*BusEvent_MarketTick)(nil),
		(*BusEvent_Withdrawal)(nil),
		(*BusEvent_Deposit)(nil),
		(*BusEvent_Auction)(nil),
		(*BusEvent_RiskFactor)(nil),
		(*BusEvent_NetworkParameter)(nil),
		(*BusEvent_LiquidityProvision)(nil),
		(*BusEvent_MarketUpdated)(nil),
		(*BusEvent_OracleSpec)(nil),
		(*BusEvent_OracleData)(nil),
		(*BusEvent_EpochEvent)(nil),
		(*BusEvent_Market)(nil),
		(*BusEvent_TxErrEvent)(nil),
	}
}

func init() {
	proto.RegisterEnum("vega.events.v1.BusEventType", BusEventType_name, BusEventType_value)
	proto.RegisterType((*MarketEvent)(nil), "vega.events.v1.MarketEvent")
	proto.RegisterType((*TxErrorEvent)(nil), "vega.events.v1.TxErrorEvent")
	proto.RegisterType((*TimeUpdate)(nil), "vega.events.v1.TimeUpdate")
	proto.RegisterType((*EpochEvent)(nil), "vega.events.v1.EpochEvent")
	proto.RegisterType((*TransferResponses)(nil), "vega.events.v1.TransferResponses")
	proto.RegisterType((*PositionResolution)(nil), "vega.events.v1.PositionResolution")
	proto.RegisterType((*LossSocialization)(nil), "vega.events.v1.LossSocialization")
	proto.RegisterType((*TradeSettlement)(nil), "vega.events.v1.TradeSettlement")
	proto.RegisterType((*SettlePosition)(nil), "vega.events.v1.SettlePosition")
	proto.RegisterType((*SettleDistressed)(nil), "vega.events.v1.SettleDistressed")
	proto.RegisterType((*MarketTick)(nil), "vega.events.v1.MarketTick")
	proto.RegisterType((*AuctionEvent)(nil), "vega.events.v1.AuctionEvent")
	proto.RegisterType((*BusEvent)(nil), "vega.events.v1.BusEvent")
}

func init() { proto.RegisterFile("vega/events/v1/events.proto", fileDescriptor_2565b4e8491d341a) }

var fileDescriptor_2565b4e8491d341a = []byte{
	// 2031 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x5b, 0x6f, 0xdb, 0xc8,
	0x15, 0x96, 0x7c, 0x93, 0x7c, 0xe4, 0xc8, 0xf4, 0x24, 0xeb, 0x30, 0x76, 0x2e, 0x8e, 0x76, 0xdb,
	0x66, 0x83, 0x85, 0xb3, 0x49, 0xda, 0xa2, 0x8b, 0xa2, 0x05, 0x68, 0x89, 0x59, 0x11, 0x96, 0x25,
	0x75, 0x48, 0xc5, 0xcd, 0xbe, 0x10, 0x0c, 0x39, 0x51, 0x58, 0x53, 0x24, 0x43, 0x8e, 0x64, 0x3b,
	0xbd, 0x3e, 0xb4, 0x40, 0xd1, 0x1f, 0xd2, 0xa7, 0xfe, 0x91, 0xbe, 0x14, 0xe8, 0xcf, 0xe8, 0xbf,
	0x28, 0xe6, 0x42, 0x89, 0xa2, 0xe8, 0xb4, 0x68, 0xdf, 0x74, 0xbe, 0x73, 0x99, 0x73, 0xce, 0x9c,
	0xcb, 0x50, 0x70, 0x38, 0x23, 0x63, 0xe7, 0x19, 0x99, 0x91, 0x90, 0xa6, 0xcf, 0x66, 0xcf, 0xe5,
	0xaf, 0xe3, 0x38, 0x89, 0x68, 0x84, 0x9a, 0x8c, 0x79, 0x2c, 0xa1, 0xd9, 0xf3, 0x03, 0xc4, 0x85,
	0x27, 0x4e, 0x72, 0x41, 0x32, 0x99, 0x83, 0x3d, 0x8e, 0x39, 0x69, 0xba, 0x80, 0x3e, 0xe3, 0xd0,
	0x38, 0x9a, 0x91, 0x24, 0x74, 0x42, 0x97, 0x48, 0x78, 0x97, 0xc3, 0xdc, 0xa4, 0x00, 0x0e, 0x38,
	0x10, 0x25, 0x8e, 0x1b, 0x10, 0x7e, 0x78, 0x1a, 0x13, 0xf7, 0x26, 0x9e, 0xe7, 0xd0, 0x4c, 0xef,
	0x11, 0xe7, 0xb9, 0xd1, 0x64, 0xe2, 0x84, 0x1e, 0x67, 0x66, 0xbf, 0xa5, 0xc0, 0x97, 0x2b, 0x02,
	0x33, 0x27, 0xf0, 0x3d, 0x87, 0x46, 0x89, 0xbd, 0x2c, 0xda, 0xea, 0x40, 0xe3, 0x8c, 0xc7, 0xa3,
	0xb3, 0x28, 0xd1, 0x21, 0x6c, 0x8b, 0xf0, 0x6c, 0xdf, 0x53, 0xab, 0x47, 0xd5, 0x27, 0xdb, 0xb8,
	0x2e, 0x00, 0xc3, 0x43, 0x2a, 0xd4, 0x62, 0xe7, 0x3a, 0x88, 0x1c, 0x4f, 0x5d, 0xe3, 0xac, 0x8c,
	0x6c, 0xfd, 0x75, 0x13, 0x76, 0xac, 0x2b, 0x3d, 0x49, 0xa2, 0x44, 0xd8, 0xb9, 0x07, 0xf5, 0xd8,
	0x49, 0xe8, 0xf5, 0xc2, 0x4c, 0x8d, 0xd3, 0x86, 0x87, 0xee, 0x42, 0x8d, 0x24, 0x89, 0x3d, 0x49,
	0xc7, 0xd2, 0xca, 0x16, 0x49, 0x92, 0xb3, 0x74, 0x8c, 0xfa, 0xa0, 0x44, 0x89, 0x47, 0x12, 0x3b,
	0x9d, 0xbe, 0x9d, 0xf8, 0x69, 0xea, 0x47, 0xa1, 0x4a, 0x8e, 0xaa, 0x4f, 0x1a, 0x2f, 0x1e, 0x1f,
	0xf3, 0xac, 0xcd, 0x5d, 0x9f, 0x3d, 0x3f, 0x1e, 0x30, 0x49, 0x73, 0x2e, 0xd8, 0xad, 0xe0, 0xdd,
	0x68, 0x19, 0x42, 0xa7, 0x20, 0x20, 0xdb, 0x99, 0x90, 0xd0, 0x9b, 0x90, 0x90, 0xaa, 0xef, 0xb8,
	0xb9, 0xa3, 0x1b, 0xcc, 0x69, 0x99, 0x5c, 0xb7, 0x82, 0x9b, 0xd1, 0x12, 0x82, 0x2c, 0x40, 0xc2,
	0x98, 0xcb, 0x6e, 0x34, 0x08, 0x1c, 0xca, 0xdc, 0x1b, 0x73, 0x7b, 0x9f, 0xdf, 0x60, 0xaf, 0x9d,
	0x13, 0xed, 0x56, 0xf0, 0x5e, 0x54, 0x04, 0xd1, 0x09, 0xd4, 0xe3, 0x24, 0x8a, 0xa3, 0xd4, 0x09,
	0xd4, 0xf7, 0xdc, 0xd6, 0x17, 0xab, 0xb6, 0x86, 0x52, 0x62, 0x29, 0xda, 0xb9, 0x1e, 0x0b, 0x73,
	0x16, 0x51, 0x92, 0xcf, 0x9a, 0x7f, 0x53, 0x98, 0xaf, 0x23, 0x4a, 0x96, 0xcc, 0x34, 0x67, 0x4b,
	0x08, 0x9a, 0xc1, 0xc3, 0xc0, 0xff, 0x30, 0xf5, 0x3d, 0x9f, 0x5e, 0xdb, 0x71, 0x12, 0xcd, 0x7c,
	0x06, 0xe7, 0x6d, 0xff, 0x8a, 0xdb, 0x3e, 0x5e, 0xb5, 0xdd, 0xcb, 0xf4, 0x86, 0x99, 0xda, 0xd2,
	0x49, 0xf7, 0x83, 0x4f, 0xf0, 0xd1, 0x39, 0xdc, 0xbe, 0xf4, 0xe9, 0x7b, 0x2f, 0x71, 0x2e, 0xf3,
	0x87, 0x5d, 0xdc, 0x94, 0x93, 0x73, 0x29, 0xbc, 0x74, 0x04, 0xba, 0x5c, 0x41, 0x4f, 0x6e, 0x41,
	0x83, 0x26, 0x4e, 0x98, 0x3a, 0x2e, 0x4b, 0x78, 0xeb, 0x29, 0x80, 0xe5, 0x4f, 0xc8, 0x28, 0xf6,
	0x1c, 0x4a, 0xd0, 0x7d, 0xd8, 0xa6, 0xfe, 0x84, 0xa4, 0xd4, 0x99, 0xc4, 0xbc, 0x4c, 0xd7, 0xf1,
	0x02, 0x68, 0xfd, 0xb1, 0x0a, 0xa0, 0xc7, 0x91, 0xfb, 0x7e, 0xde, 0x1a, 0xd3, 0xd0, 0xff, 0x30,
	0x25, 0x59, 0x4d, 0x6f, 0xe0, 0xba, 0x00, 0x0c, 0x0f, 0x3d, 0x00, 0x48, 0xa9, 0x93, 0x50, 0x9b,
	0xa9, 0xf3, 0xba, 0x5e, 0xc7, 0xdb, 0x1c, 0x61, 0xc7, 0xa1, 0x47, 0xd0, 0x20, 0x57, 0xb1, 0x9f,
	0x10, 0xc1, 0x5f, 0xe7, 0x7c, 0x10, 0x10, 0x17, 0xb8, 0x07, 0x75, 0x12, 0x7a, 0x82, 0xbb, 0xc1,
	0xb9, 0x35, 0x12, 0x7a, 0x8c, 0xd5, 0x32, 0x60, 0xcf, 0x62, 0x11, 0xbc, 0x23, 0x09, 0x26, 0x69,
	0x1c, 0x85, 0x29, 0x49, 0xd1, 0x0f, 0x61, 0x3b, 0xc9, 0x08, 0xb5, 0x7a, 0xb4, 0xfe, 0xa4, 0xf1,
	0x62, 0x5f, 0x64, 0xa9, 0x28, 0x8b, 0x17, 0x82, 0xad, 0x3f, 0x57, 0x01, 0x0d, 0xa3, 0xd4, 0x67,
	0xa9, 0xc0, 0x24, 0x8d, 0x82, 0x29, 0xaf, 0xc2, 0x4f, 0x36, 0xfd, 0x43, 0x00, 0xcf, 0x4f, 0x69,
	0x42, 0xd2, 0x94, 0x78, 0x32, 0xb2, 0x1c, 0x82, 0xf6, 0x61, 0xcb, 0x0d, 0x22, 0xc6, 0x13, 0x51,
	0x49, 0x8a, 0x65, 0x84, 0xd9, 0xb0, 0xe3, 0xc4, 0x77, 0x45, 0x4c, 0x1b, 0x98, 0x1f, 0x33, 0x64,
	0x40, 0xcb, 0x85, 0xbd, 0x5e, 0x94, 0xa6, 0x66, 0xe4, 0xfa, 0x4e, 0xe0, 0x7f, 0x74, 0xfe, 0xb3,
	0x23, 0xf9, 0x91, 0xb2, 0xb6, 0x3c, 0x52, 0xf6, 0x61, 0xcb, 0x99, 0x44, 0xd3, 0x90, 0x66, 0x3e,
	0x08, 0xaa, 0xf5, 0x53, 0xd8, 0xb5, 0x12, 0xc7, 0x23, 0x26, 0xa1, 0x34, 0x20, 0xbc, 0x8f, 0x11,
	0x6c, 0xa4, 0xfe, 0x47, 0x22, 0x6f, 0x9b, 0xff, 0x46, 0x77, 0x60, 0x53, 0x78, 0xb9, 0xc6, 0xbd,
	0x14, 0x44, 0xeb, 0x6f, 0x55, 0x68, 0x0a, 0xc5, 0x2c, 0x65, 0xff, 0xb3, 0x7f, 0xf3, 0x03, 0xd6,
	0x73, 0x07, 0xa0, 0x1e, 0xec, 0x51, 0xe6, 0x9d, 0x9d, 0xce, 0xdd, 0x4b, 0xd5, 0x0d, 0x7e, 0x97,
	0x8f, 0x8e, 0x97, 0x37, 0xcf, 0x71, 0x21, 0x0c, 0xac, 0xd0, 0x65, 0x20, 0x6d, 0x5d, 0x81, 0x22,
	0xc8, 0xce, 0xe2, 0x6e, 0xfe, 0x8f, 0x7c, 0x4e, 0x9c, 0x64, 0xec, 0x87, 0xd2, 0x61, 0x49, 0x2d,
	0xe2, 0xd8, 0xc8, 0x27, 0xea, 0x6b, 0x00, 0xb1, 0x42, 0x2c, 0xdf, 0xbd, 0x40, 0x4d, 0x58, 0x9b,
	0x1f, 0xb6, 0xe6, 0x7b, 0x2c, 0xe1, 0xb9, 0x9e, 0xe0, 0xbf, 0x5b, 0x7f, 0x5a, 0x83, 0x1d, 0x6d,
	0xca, 0x3b, 0xf2, 0xbf, 0x58, 0x3b, 0x3f, 0x80, 0xdd, 0x28, 0x26, 0xa1, 0x1f, 0x8e, 0x6d, 0x47,
	0x28, 0x71, 0x63, 0x75, 0xdc, 0x94, 0xb0, 0x34, 0xc5, 0xdc, 0x0b, 0x88, 0x33, 0x13, 0x69, 0xae,
	0x63, 0x41, 0x30, 0x94, 0x37, 0xa2, 0xec, 0x2b, 0x41, 0x20, 0x05, 0xd6, 0x49, 0xe8, 0xa9, 0x9b,
	0x1c, 0x63, 0x3f, 0xd1, 0x31, 0xd4, 0x68, 0xe2, 0x8f, 0xc7, 0x24, 0x51, 0xb7, 0x8e, 0xaa, 0x4f,
	0x9a, 0x2f, 0xee, 0x88, 0x4b, 0x90, 0xd6, 0x2d, 0xc1, 0xc3, 0x99, 0x10, 0xd2, 0x60, 0x8f, 0x5c,
	0x51, 0x12, 0xf2, 0x01, 0x99, 0x69, 0xd6, 0x3e, 0xa1, 0xa9, 0xcc, 0xc5, 0x25, 0xd2, 0xfa, 0x47,
	0x13, 0xea, 0x27, 0xd3, 0x54, 0xe4, 0xa0, 0x98, 0xb8, 0x3b, 0xb0, 0xf9, 0x36, 0x88, 0xdc, 0x0b,
	0x79, 0x39, 0x82, 0x40, 0x5f, 0xc3, 0x06, 0xbd, 0x8e, 0x45, 0x88, 0xcd, 0x17, 0xf7, 0x8b, 0x75,
	0x92, 0x59, 0xb3, 0xae, 0x63, 0x82, 0xb9, 0x24, 0xfa, 0x19, 0x34, 0x58, 0xd2, 0xed, 0x29, 0x9f,
	0x79, 0x72, 0xa3, 0x1e, 0xac, 0x14, 0xd8, 0x7c, 0x2a, 0x76, 0x2b, 0x18, 0xe8, 0x62, 0x46, 0x62,
	0x40, 0x54, 0x8e, 0x14, 0x7b, 0x31, 0x72, 0xde, 0xe5, 0xf7, 0xf2, 0x52, 0x99, 0x2e, 0x0f, 0x2a,
	0xb6, 0xf6, 0xe8, 0xca, 0xf4, 0x1a, 0xc1, 0xed, 0x58, 0xf6, 0x14, 0xb3, 0x29, 0xe7, 0x90, 0xdc,
	0xa6, 0xad, 0xa2, 0xd1, 0xd5, 0x89, 0xc5, 0x66, 0x7d, 0xbc, 0x3a, 0xc7, 0x3e, 0x87, 0x4d, 0xbe,
	0x62, 0xe5, 0x2a, 0x6d, 0x08, 0x43, 0x7c, 0x15, 0x77, 0x2b, 0x58, 0xf0, 0xd0, 0x97, 0x50, 0x73,
	0x5c, 0x97, 0x0f, 0x0b, 0xb1, 0x26, 0x6f, 0xc9, 0xcb, 0x12, 0x60, 0xb7, 0x82, 0x33, 0x3e, 0xb3,
	0xc7, 0x3b, 0x42, 0xee, 0x3c, 0x69, 0x6f, 0xc8, 0x20, 0x66, 0x8f, 0xf3, 0x98, 0x10, 0xef, 0x45,
	0xb9, 0xab, 0x1a, 0xf3, 0x29, 0xec, 0xb1, 0x4c, 0x0a, 0x1e, 0xfa, 0x06, 0x6e, 0x89, 0x16, 0xb2,
	0x03, 0x32, 0x23, 0x41, 0xaa, 0x06, 0x5c, 0x18, 0x09, 0xe1, 0x33, 0xce, 0xea, 0x71, 0x4e, 0xb7,
	0x82, 0x77, 0x26, 0x39, 0x1a, 0x7d, 0x95, 0x7b, 0x22, 0x4c, 0xb8, 0x56, 0x53, 0xfa, 0x21, 0xd1,
	0xa5, 0xc7, 0xc0, 0x11, 0x6c, 0xb0, 0x8d, 0xae, 0x86, 0x5c, 0x12, 0x84, 0x24, 0xdb, 0xfa, 0xdd,
	0x0a, 0xe6, 0x1c, 0xf4, 0x12, 0x1a, 0xb2, 0xd5, 0xd8, 0x8b, 0x52, 0x8d, 0xb8, 0xa0, 0x32, 0x77,
	0xe4, 0x82, 0xd0, 0x8e, 0x43, 0x1d, 0x56, 0x04, 0x93, 0x39, 0x85, 0xba, 0xd0, 0x0c, 0x23, 0x36,
	0xa9, 0xfc, 0x71, 0xe8, 0xd0, 0x69, 0x42, 0xd4, 0x98, 0xeb, 0x3d, 0x5a, 0xdd, 0xcc, 0xfd, 0xc8,
	0x23, 0x66, 0x26, 0xd6, 0xad, 0xe0, 0x5b, 0x61, 0x1e, 0x60, 0xe5, 0x14, 0x44, 0x69, 0x6a, 0xa7,
	0xf9, 0xc1, 0xaf, 0x7e, 0x28, 0x2f, 0xa7, 0x95, 0x0d, 0xc1, 0xca, 0x29, 0x58, 0x59, 0x1b, 0x06,
	0xec, 0x8a, 0x11, 0x6a, 0x67, 0x45, 0xa1, 0x26, 0xdc, 0xe0, 0xc3, 0xa2, 0xc1, 0xe5, 0x79, 0xce,
	0xde, 0x3f, 0xe9, 0xf2, 0x84, 0x1f, 0xc0, 0x9e, 0x34, 0x95, 0x5b, 0x7a, 0x69, 0xfe, 0x39, 0x55,
	0x34, 0xb6, 0x18, 0xb7, 0xdd, 0x0a, 0x56, 0xd2, 0xe2, 0x08, 0xfe, 0x11, 0x34, 0x65, 0xba, 0xdd,
	0x84, 0x38, 0x94, 0x78, 0x2a, 0xe5, 0xd6, 0x76, 0xf2, 0x19, 0x67, 0x69, 0x12, 0x52, 0x6d, 0x21,
	0xc4, 0xaa, 0x8a, 0x7f, 0x52, 0xa8, 0xd3, 0x7c, 0x55, 0x69, 0x0c, 0x62, 0x55, 0xc5, 0x79, 0xac,
	0xb3, 0xa5, 0x6d, 0xea, 0xbb, 0x17, 0xea, 0xac, 0xbc, 0xb3, 0x17, 0xb3, 0x79, 0x71, 0xa9, 0x7c,
	0x52, 0xbf, 0x00, 0xc8, 0x1e, 0x4c, 0x4e, 0xa0, 0x5e, 0xe6, 0x0b, 0xe1, 0x7c, 0x8e, 0x33, 0x9d,
	0x85, 0x14, 0xeb, 0x1e, 0x8f, 0xf0, 0x2c, 0xab, 0x57, 0xf9, 0xee, 0xe9, 0x08, 0x90, 0x75, 0x8f,
	0xe4, 0xa3, 0x9f, 0x40, 0x2d, 0x1b, 0xd7, 0xd7, 0x5c, 0x74, 0x65, 0x58, 0xe5, 0x57, 0x00, 0xef,
	0x3b, 0x39, 0xc7, 0x5f, 0x42, 0x23, 0xf1, 0xd3, 0x0b, 0xfb, 0x9d, 0xe3, 0xd2, 0x28, 0x51, 0x3f,
	0xe6, 0x3d, 0xc3, 0x7e, 0x7a, 0xf1, 0x8a, 0xe3, 0xcc, 0xb3, 0x64, 0x4e, 0x21, 0x1d, 0xf6, 0x42,
	0x42, 0x2f, 0x23, 0xf6, 0xe4, 0x70, 0x12, 0x67, 0x42, 0x28, 0x49, 0xd4, 0x5f, 0x73, 0x55, 0xf9,
	0x32, 0xea, 0x0b, 0xf6, 0x30, 0xe3, 0xb2, 0xfb, 0x0a, 0x0b, 0x18, 0x3a, 0x85, 0xdb, 0x25, 0x0f,
	0x60, 0xf5, 0x37, 0xdc, 0x90, 0x2a, 0x0c, 0xad, 0xbe, 0x74, 0xd9, 0x40, 0x5a, 0x7d, 0xdf, 0xe6,
	0x2e, 0x5f, 0x0c, 0x5f, 0x4f, 0xfd, 0xed, 0xa7, 0x2e, 0x5f, 0x4c, 0x5c, 0x0f, 0x7d, 0x03, 0x0d,
	0xf1, 0xe1, 0x67, 0xb3, 0x0f, 0x42, 0xf5, 0x77, 0x32, 0x08, 0xf9, 0x31, 0x28, 0x3e, 0x2f, 0xd8,
	0x4f, 0x33, 0x26, 0x2e, 0xcb, 0x42, 0x34, 0xa7, 0x72, 0xaa, 0xbc, 0xbb, 0x7f, 0x7f, 0x93, 0x6a,
	0xd6, 0xe3, 0xd1, 0x9c, 0x42, 0x3f, 0x87, 0x06, 0x61, 0xaf, 0x5d, 0x9b, 0x5f, 0x90, 0xfa, 0x87,
	0x6a, 0x79, 0x39, 0x2d, 0x5e, 0xc4, 0x4c, 0x9f, 0x2c, 0xde, 0xc7, 0x3f, 0xe6, 0x8f, 0x86, 0x0b,
	0x42, 0xd5, 0x7f, 0xd5, 0xb8, 0xea, 0x61, 0x79, 0x25, 0x66, 0xba, 0x52, 0x1a, 0x69, 0xb0, 0x43,
	0xaf, 0x6c, 0xf6, 0x49, 0x28, 0x0e, 0xfe, 0xe7, 0x6e, 0x79, 0xb5, 0xe4, 0xbf, 0x2f, 0xf9, 0x8e,
	0x62, 0x34, 0xa7, 0x4e, 0x6a, 0xb0, 0xc9, 0xe5, 0x9e, 0xfe, 0xa5, 0x0e, 0x3b, 0xf9, 0x15, 0x88,
	0x1e, 0xc2, 0xc1, 0xc9, 0xc8, 0xb4, 0xf5, 0xd7, 0x7a, 0xdf, 0xb2, 0xad, 0x37, 0x43, 0xdd, 0x1e,
	0xf5, 0xcd, 0xa1, 0xde, 0x36, 0x5e, 0x19, 0x7a, 0x47, 0xa9, 0xa0, 0x7d, 0x40, 0x05, 0xbe, 0xd6,
	0xeb, 0x29, 0xd5, 0x12, 0x3d, 0xcb, 0x38, 0xd3, 0xed, 0xd1, 0xb0, 0xa3, 0x59, 0xba, 0xb2, 0x86,
	0xbe, 0x07, 0x8f, 0x8b, 0x7c, 0xac, 0xf5, 0xcd, 0x57, 0x3a, 0xb6, 0xb1, 0x6e, 0x0e, 0x07, 0x7d,
	0x53, 0x37, 0x95, 0x75, 0xf4, 0x7d, 0x68, 0x15, 0xc4, 0x86, 0x03, 0xd3, 0xb0, 0x8c, 0x41, 0x9f,
	0x89, 0x0d, 0x7a, 0x23, 0xf6, 0x53, 0xd9, 0x40, 0x2a, 0xdc, 0x29, 0xc8, 0x0d, 0x70, 0x47, 0xc7,
	0xca, 0x26, 0x3a, 0x80, 0xfd, 0xa2, 0x83, 0xed, 0xf6, 0x60, 0xd4, 0xb7, 0x94, 0xad, 0x12, 0xad,
	0xa1, 0x86, 0xad, 0x37, 0x4a, 0xad, 0x84, 0x63, 0x61, 0xad, 0xa3, 0x2b, 0x75, 0x74, 0x04, 0xf7,
	0x0b, 0x9c, 0x33, 0x0d, 0x7f, 0x6b, 0xf4, 0xed, 0x9e, 0xfe, 0x5a, 0xef, 0x99, 0xca, 0x36, 0x3a,
	0x84, 0xbb, 0x45, 0xab, 0x78, 0x30, 0x1c, 0x98, 0x5a, 0x4f, 0x01, 0x74, 0x17, 0x6e, 0x17, 0x98,
	0xaf, 0x07, 0x96, 0xae, 0x34, 0x4a, 0x12, 0x76, 0xa6, 0xe1, 0x53, 0xdd, 0xb2, 0x3b, 0x9a, 0xa5,
	0x29, 0x3b, 0xe8, 0x31, 0x3c, 0x28, 0xf0, 0xfb, 0x83, 0x8e, 0x6e, 0x9b, 0xc6, 0xb7, 0x7d, 0xcd,
	0x1a, 0x61, 0x5d, 0xb9, 0x55, 0x92, 0xd3, 0xde, 0xc0, 0x34, 0x6d, 0x73, 0xd0, 0x36, 0xb4, 0x9e,
	0xf1, 0x9d, 0xc6, 0x73, 0xd5, 0x44, 0x2d, 0x78, 0x58, 0x10, 0x33, 0x75, 0xcb, 0xea, 0x2d, 0x52,
	0xab, 0xec, 0xa2, 0x2f, 0xe0, 0xa8, 0x5c, 0xa6, 0x63, 0x98, 0x16, 0xd6, 0x4d, 0x53, 0xef, 0x28,
	0x4a, 0x89, 0x4f, 0xd2, 0xe7, 0x36, 0xd6, 0x35, 0x4b, 0xef, 0x28, 0x7b, 0x25, 0x89, 0xd4, 0x4c,
	0x53, 0xb7, 0x14, 0x74, 0x73, 0xc0, 0x96, 0xd1, 0x3e, 0x55, 0x6e, 0xa3, 0x07, 0x70, 0xaf, 0xc0,
	0x3f, 0x37, 0xac, 0x6e, 0x07, 0x6b, 0xe7, 0x5a, 0x4f, 0xb9, 0x53, 0x72, 0xaf, 0x1d, 0x9d, 0x07,
	0xa0, 0x7c, 0x56, 0x76, 0xe7, 0xa3, 0x36, 0x8f, 0x6c, 0xbf, 0xe4, 0x58, 0x6c, 0x98, 0xa7, 0xf6,
	0x2b, 0xad, 0x6d, 0x0d, 0xb0, 0x72, 0xb7, 0x24, 0xf2, 0xbe, 0x6e, 0x9d, 0x0f, 0xf0, 0x29, 0xab,
	0x0d, 0xed, 0x4c, 0xb7, 0x74, 0xac, 0xa8, 0x25, 0x75, 0xd9, 0x33, 0x7e, 0x31, 0x32, 0x3a, 0x86,
	0xf5, 0x86, 0xdd, 0xf6, 0x6b, 0xc3, 0x64, 0xa7, 0xdd, 0xbb, 0x39, 0x43, 0xa2, 0x11, 0x3a, 0xca,
	0x41, 0x89, 0x43, 0x03, 0xac, 0xb5, 0x7b, 0xba, 0xcd, 0xda, 0x4c, 0x39, 0xbc, 0x99, 0xcf, 0x0b,
	0xe3, 0x3e, 0x7a, 0x04, 0x87, 0x05, 0xbe, 0x3e, 0x1c, 0xb4, 0xbb, 0x59, 0xab, 0x3d, 0x40, 0xf7,
	0xe0, 0xb3, 0x52, 0x1f, 0x14, 0xf6, 0xfd, 0x5e, 0x2c, 0x55, 0xeb, 0x97, 0xb6, 0x8e, 0xf1, 0x00,
	0x2b, 0x7f, 0xaf, 0x9e, 0x7c, 0xf5, 0xdd, 0x53, 0x37, 0xf2, 0x08, 0x9f, 0x23, 0xfc, 0xcf, 0x2e,
	0x37, 0x0a, 0x8e, 0xfd, 0xe8, 0x19, 0xff, 0x9d, 0x3e, 0x5b, 0xfe, 0xe3, 0xef, 0xed, 0x16, 0x87,
	0x5f, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xf3, 0x81, 0xe2, 0x11, 0x14, 0x00, 0x00,
}
