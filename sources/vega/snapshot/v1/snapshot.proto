syntax = "proto3";

package vega.snapshot.v1;
option go_package = "code.vegaprotocol.io/protos/vega/snapshot/v1";

import "vega/vega.proto";
import "vega/assets.proto";
import "vega/chain_events.proto";
import "vega/governance.proto";

enum Format {
  // Default value, always invalid
  FORMAT_UNSPECIFIED = 0;
  // Standard proto encoding
  FORMAT_PROTO = 1;
  // Compressed proto, might come in handy
  FORMAT_PROTO_COMPRESSED = 2;
  // Simple JSON serialisation, probably not going to be used
  FORMAT_JSON = 3;
}

// Represents a set of time intervals that are used when querying for candle-stick data
message Snapshot {
  uint64 height = 1;
  Format format = 2;
  uint32 chunks = 3;
  bytes hash = 4;
  bytes metadata = 5;
}

// Chunk is simply an as-is chunk belonging to a snapshot
// not sure how usable this type would be
message Chunk {
  repeated Payload data = 1;
}

message Payload {
  oneof data {
    ActiveAssets active_assets = 1;
    PendingAssets pending_assets = 2;
    BankingWithdrawals banking_withdrawals = 3;
    BankingDeposits banking_deposits = 4;
    BankingSeen banking_seen = 5;
    Checkpoint checkpoint = 6;
    CollateralAccounts collateral_accounts = 7;
    CollateralAssets collateral_assets = 8;
    DelegationActive delegation_active = 9;
    DelegationPending delegation_pending = 10;
    GovernanceActive governance_active = 11;
    GovernanceEnacted governance_enacted = 12;
    StakingAccounts staking_accounts = 13;
  }
}

message CollateralAccounts {
  repeated vega.Account accounts = 1;
}

message CollateralAssets {
  repeated vega.AssetDetails assets = 1;
}

message ActiveAssets {
  repeated vega.AssetDetails assets = 1;
}

message PendingAssets {
  repeated vega.AssetDetails assets = 1;
}

message Withdrawal {
  string ref = 1;
  vega.Withdrawal withdrawal = 2;
}

message Deposit {
  string id = 1;
  vega.Deposit deposit = 2;
}

message TxRef {
  string asset = 1;
  uint64 block_nr = 2;
  string hash = 3;
  uint64 log_index = 4;
}

message BankingWithdrawals {
  repeated Withdrawal withdrawals = 1;
}

message BankingDeposits {
  repeated Deposit deposit = 1;
}

message BankingSeen {
  repeated TxRef refs = 1;
}

message Checkpoint {
  int64 next_cp = 1;
}

message DelegationActive {
  repeated vega.Delegation delegations = 1;
}

message DelegationPending {
  repeated vega.Delegation delegations = 1;
  repeated vega.Delegation undelegation = 2;
}

message PendingProposal {
  vega.Proposal proposal = 1;
  repeated vega.Vote yes = 2;
  repeated vega.Vote no = 3;
  repeated vega.Vote invalid = 4;
}

message GovernanceEnacted {
  repeated vega.Proposal proposals = 1;
}

message GovernanceActive {
  repeated PendingProposal proposals = 1;
}

message StakingAccount {
  string party = 1;
  string balance = 2;
  repeated vega.StakingEvent events = 3;
}

message StakingAccounts {
  repeated StakingAccount accounts = 1;
}
